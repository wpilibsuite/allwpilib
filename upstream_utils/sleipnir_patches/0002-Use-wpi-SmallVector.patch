From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tyler Veness <calcmogul@gmail.com>
Date: Sun, 16 Jun 2024 12:08:49 -0700
Subject: [PATCH 2/8] Use wpi::SmallVector

---
 include/sleipnir/autodiff/expression.hpp      | 4 ++--
 include/sleipnir/autodiff/variable.hpp        | 4 ++--
 include/sleipnir/autodiff/variable_matrix.hpp | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/include/sleipnir/autodiff/expression.hpp b/include/sleipnir/autodiff/expression.hpp
index f5919de6c9c0be044335ce7764ded545215f0486..46814576a3db9f472329b880b94b1ab98d218867 100644
--- a/include/sleipnir/autodiff/expression.hpp
+++ b/include/sleipnir/autodiff/expression.hpp
@@ -33,7 +33,7 @@ struct Expression;
 template <typename Scalar>
 constexpr void inc_ref_count(Expression<Scalar>* expr);
 template <typename Scalar>
-constexpr void dec_ref_count(Expression<Scalar>* expr);
+void dec_ref_count(Expression<Scalar>* expr);
 
 /**
  * Typedef for intrusive shared pointer to Expression.
@@ -801,7 +801,7 @@ constexpr void inc_ref_count(Expression<Scalar>* expr) {
  * @param expr The shared pointer's managed object.
  */
 template <typename Scalar>
-constexpr void dec_ref_count(Expression<Scalar>* expr) {
+void dec_ref_count(Expression<Scalar>* expr) {
   // If a deeply nested tree is being deallocated all at once, calling the
   // Expression destructor when expr's refcount reaches zero can cause a stack
   // overflow. Instead, we iterate over its children to decrement their
diff --git a/include/sleipnir/autodiff/variable.hpp b/include/sleipnir/autodiff/variable.hpp
index eb12ec1b6ca275af1e368942c7e4a2a8c0db7943..45ea9bf82375025869487f9b0f780f1f7f2c820f 100644
--- a/include/sleipnir/autodiff/variable.hpp
+++ b/include/sleipnir/autodiff/variable.hpp
@@ -61,7 +61,7 @@ class Variable : public SleipnirBase {
   /**
    * Constructs an empty Variable.
    */
-  explicit constexpr Variable(std::nullptr_t) : expr{nullptr} {}
+  explicit Variable(std::nullptr_t) : expr{nullptr} {}
 
   /**
    * Constructs a Variable from a scalar type.
@@ -116,7 +116,7 @@ class Variable : public SleipnirBase {
    *
    * @param expr The autodiff variable.
    */
-  explicit constexpr Variable(detail::ExpressionPtr<Scalar>&& expr)
+  explicit Variable(detail::ExpressionPtr<Scalar>&& expr)
       : expr{std::move(expr)} {}
 
   /**
diff --git a/include/sleipnir/autodiff/variable_matrix.hpp b/include/sleipnir/autodiff/variable_matrix.hpp
index ca4433b46af24ef51085af0278d3ef146407d274..951d5741984288deac289504d2304b5be7fec916 100644
--- a/include/sleipnir/autodiff/variable_matrix.hpp
+++ b/include/sleipnir/autodiff/variable_matrix.hpp
@@ -1293,14 +1293,14 @@ class VariableMatrix : public SleipnirBase {
    *
    * @return Const begin iterator.
    */
-  const_iterator cbegin() const { return const_iterator{m_storage.cbegin()}; }
+  const_iterator cbegin() const { return const_iterator{m_storage.begin()}; }
 
   /**
    * Returns const end iterator.
    *
    * @return Const end iterator.
    */
-  const_iterator cend() const { return const_iterator{m_storage.cend()}; }
+  const_iterator cend() const { return const_iterator{m_storage.end()}; }
 
   /**
    * Returns reverse begin iterator.

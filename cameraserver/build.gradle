ext {
    nativeName = 'cameraserver'
    devMain = 'edu.wpi.first.cameraserver.DevMain'
}

evaluationDependsOn(':ntcore')
evaluationDependsOn(':cscore')
evaluationDependsOn(':hal')

apply from: "${rootDir}/shared/javacpp/setupBuild.gradle"
apply from: "${rootDir}/shared/java/opencv-module-patches.gradle"

dependencies {
    implementation project(':wpiutil')
    implementation project(':wpinet')
    implementation project(':ntcore')
    implementation project(':cscore')
}

ext {
    sharedCvConfigs = [cameraserver    : [],
        cameraserverBase: [],
        cameraserverDev : [],
        cameraserverTest: []]
    staticCvConfigs = [:]
    useJava = true
    useCpp = true
}

apply from: "${rootDir}/shared/opencv.gradle"

nativeUtils.exportsConfigs {
    cameraserver {
    }
}

model {
    components {}
    binaries {
        all {
            if (!it.buildable || !(it instanceof NativeBinarySpec)) {
                return
            }
            project(':ntcore').addNtcoreDependency(it, 'shared')
            lib project: ':cscore', library: 'cscore', linkage: 'shared'
            lib project: ':wpinet', library: 'wpinet', linkage: 'shared'
            lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
        }
    }
    tasks {
        def c = $.components
        def found = false
        def systemArch = getCurrentArch()
        c.each {
            if (it in NativeExecutableSpec && it.name == "${nativeName}Dev") {
                it.binaries.each {
                    if (!found) {
                        def arch = it.targetPlatform.name
                        if (arch == systemArch) {
                            def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'

                            found = true
                        }
                    }
                }
            }
        }
    }
}

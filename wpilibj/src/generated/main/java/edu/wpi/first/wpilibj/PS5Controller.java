// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpilibj/generate_hids.py. DO NOT MODIFY


package edu.wpi.first.wpilibj;

import edu.wpi.first.hal.HAL;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.util.sendable.SendableBuilder;
import edu.wpi.first.wpilibj.event.BooleanEvent;
import edu.wpi.first.wpilibj.event.EventLoop;
import java.util.Arrays;
import java.util.Locale;
import java.util.stream.Collectors;

/**
 * Handle input from PS5 controllers connected to the Driver Station.
 *
 * <p>This class handles PS5 input that comes from the Driver Station. Each time a value is
 * requested the most recent value is returned. There is a single class instance for each controller
 * and the mapping of ports to hardware buttons depends on the code in the Driver Station.
 *
 * <p>Only first party controllers from Sony are guaranteed to have the correct mapping, and
 * only through the official NI DS. Sim is not guaranteed to have the same mapping, as well as any
 * 3rd party controllers.
 */
public class PS5Controller extends GenericHID implements Sendable {
  /** Represents a digital button on a PS5Controller. */
  public enum Button {
    /** Square button. */
    SQUARE(1),
    /** Cross button. */
    CROSS(2),
    /** Circle button. */
    CIRCLE(3),
    /** Triangle button. */
    TRIANGLE(4),
    /** Left trigger 1 button. */
    L1(5),
    /** Right trigger 1 button. */
    R1(6),
    /** Left trigger 2 button. */
    L2(7),
    /** Right trigger 2 button. */
    R2(8),
    /** Create button. */
    CREATE(9),
    /** Options button. */
    OPTIONS(10),
    /** L3 (left stick) button. */
    L3(11),
    /** R3 (right stick) button. */
    R3(12),
    /** PlayStation button. */
    PS(13),
    /** Touchpad button. */
    TOUCHPAD(14);

    /** Button value. */
    public final int value;

    Button(int value) {
      this.value = value;
    }

    /**
     * Get the human-friendly name of the button, matching the relevant methods. This is done by
     * appending `Button`.
     *
     * <p>Primarily used for automated unit tests.
     *
     * @return the human-friendly name of the button.
     */
    @Override
    public String toString() {
      var name = this.name();
      if (name.length() > 2) {
        name = name.transform(str -> Arrays.stream(str.split("_"))
            .map(s -> s.substring(0, 1).toUpperCase(Locale.getDefault())
                      + s.substring(1).toLowerCase(Locale.getDefault()))
            .collect(Collectors.joining())
        );
      }
      return name + "Button";
    }
  }

  /** Represents an axis on an PS5Controller. */
  public enum Axis {
    /** Left X axis. */
    LEFT_X(0),
    /** Left Y axis. */
    LEFT_Y(1),
    /** Right X axis. */
    RIGHT_X(2),
    /** Right Y axis. */
    RIGHT_Y(5),
    /** Left trigger 2. */
    L2(3),
    /** Right trigger 2. */
    R2(4);

    /** Axis value. */
    public final int value;

    Axis(int value) {
      this.value = value;
    }

    /**
     * Get the human-friendly name of the axis, matching the relevant methods. This is done by
     * appending `Axis` if the name ends with `2`.
     *
     * <p>Primarily used for automated unit tests.
     *
     * @return the human-friendly name of the axis.
     */
    @Override
    public String toString() {
      var name = this.name()
          .transform(str -> Arrays.stream(str.split("_"))
              .map(s -> s.substring(0, 1).toUpperCase(Locale.getDefault())
                        + s.substring(1).toLowerCase(Locale.getDefault()))
              .collect(Collectors.joining())
          );
      if (name.endsWith("2")) {
        return name + "Axis";
      }
      return name;
    }
  }

  /**
   * Construct an instance of a controller.
   *
   * @param port The port index on the Driver Station that the controller is plugged into (0-5).
   */
  public PS5Controller(final int port) {
    super(port);
    HAL.reportUsage("HID", port, "PS5Controller");
  }

  /**
   * Get the X axis value of left side of the controller. Right is positive.
   *
   * @return The axis value.
   */
  public double getLeftX() {
    return getRawAxis(Axis.LEFT_X.value);
  }

  /**
   * Get the Y axis value of left side of the controller. Back is positive.
   *
   * @return The axis value.
   */
  public double getLeftY() {
    return getRawAxis(Axis.LEFT_Y.value);
  }

  /**
   * Get the X axis value of right side of the controller. Right is positive.
   *
   * @return The axis value.
   */
  public double getRightX() {
    return getRawAxis(Axis.RIGHT_X.value);
  }

  /**
   * Get the Y axis value of right side of the controller. Back is positive.
   *
   * @return The axis value.
   */
  public double getRightY() {
    return getRawAxis(Axis.RIGHT_Y.value);
  }

  /**
   * Get the left trigger 2 axis value of the controller. Note that this axis is bound to the
   * range of [0, 1] as opposed to the usual [-1, 1].
   *
   * @return The axis value.
   */
  public double getL2Axis() {
    return getRawAxis(Axis.L2.value);
  }

  /**
   * Get the right trigger 2 axis value of the controller. Note that this axis is bound to the
   * range of [0, 1] as opposed to the usual [-1, 1].
   *
   * @return The axis value.
   */
  public double getR2Axis() {
    return getRawAxis(Axis.R2.value);
  }

  /**
   * Read the value of the square button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getSquareButton() {
    return getRawButton(Button.SQUARE.value);
  }

  /**
   * Whether the square button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getSquareButtonPressed() {
    return getRawButtonPressed(Button.SQUARE.value);
  }

  /**
   * Whether the square button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getSquareButtonReleased() {
    return getRawButtonReleased(Button.SQUARE.value);
  }

  /**
   * Constructs an event instance around the square button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the square button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent square(EventLoop loop) {
    return button(Button.SQUARE.value, loop);
  }

  /**
   * Read the value of the cross button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getCrossButton() {
    return getRawButton(Button.CROSS.value);
  }

  /**
   * Whether the cross button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getCrossButtonPressed() {
    return getRawButtonPressed(Button.CROSS.value);
  }

  /**
   * Whether the cross button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getCrossButtonReleased() {
    return getRawButtonReleased(Button.CROSS.value);
  }

  /**
   * Constructs an event instance around the cross button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the cross button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent cross(EventLoop loop) {
    return button(Button.CROSS.value, loop);
  }

  /**
   * Read the value of the circle button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getCircleButton() {
    return getRawButton(Button.CIRCLE.value);
  }

  /**
   * Whether the circle button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getCircleButtonPressed() {
    return getRawButtonPressed(Button.CIRCLE.value);
  }

  /**
   * Whether the circle button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getCircleButtonReleased() {
    return getRawButtonReleased(Button.CIRCLE.value);
  }

  /**
   * Constructs an event instance around the circle button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the circle button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent circle(EventLoop loop) {
    return button(Button.CIRCLE.value, loop);
  }

  /**
   * Read the value of the triangle button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getTriangleButton() {
    return getRawButton(Button.TRIANGLE.value);
  }

  /**
   * Whether the triangle button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getTriangleButtonPressed() {
    return getRawButtonPressed(Button.TRIANGLE.value);
  }

  /**
   * Whether the triangle button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getTriangleButtonReleased() {
    return getRawButtonReleased(Button.TRIANGLE.value);
  }

  /**
   * Constructs an event instance around the triangle button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the triangle button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent triangle(EventLoop loop) {
    return button(Button.TRIANGLE.value, loop);
  }

  /**
   * Read the value of the left trigger 1 button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getL1Button() {
    return getRawButton(Button.L1.value);
  }

  /**
   * Whether the left trigger 1 button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getL1ButtonPressed() {
    return getRawButtonPressed(Button.L1.value);
  }

  /**
   * Whether the left trigger 1 button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getL1ButtonReleased() {
    return getRawButtonReleased(Button.L1.value);
  }

  /**
   * Constructs an event instance around the left trigger 1 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the left trigger 1 button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent L1(EventLoop loop) {
    return button(Button.L1.value, loop);
  }

  /**
   * Read the value of the right trigger 1 button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getR1Button() {
    return getRawButton(Button.R1.value);
  }

  /**
   * Whether the right trigger 1 button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getR1ButtonPressed() {
    return getRawButtonPressed(Button.R1.value);
  }

  /**
   * Whether the right trigger 1 button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getR1ButtonReleased() {
    return getRawButtonReleased(Button.R1.value);
  }

  /**
   * Constructs an event instance around the right trigger 1 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the right trigger 1 button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent R1(EventLoop loop) {
    return button(Button.R1.value, loop);
  }

  /**
   * Read the value of the left trigger 2 button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getL2Button() {
    return getRawButton(Button.L2.value);
  }

  /**
   * Whether the left trigger 2 button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getL2ButtonPressed() {
    return getRawButtonPressed(Button.L2.value);
  }

  /**
   * Whether the left trigger 2 button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getL2ButtonReleased() {
    return getRawButtonReleased(Button.L2.value);
  }

  /**
   * Constructs an event instance around the left trigger 2 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the left trigger 2 button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent L2(EventLoop loop) {
    return button(Button.L2.value, loop);
  }

  /**
   * Read the value of the right trigger 2 button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getR2Button() {
    return getRawButton(Button.R2.value);
  }

  /**
   * Whether the right trigger 2 button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getR2ButtonPressed() {
    return getRawButtonPressed(Button.R2.value);
  }

  /**
   * Whether the right trigger 2 button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getR2ButtonReleased() {
    return getRawButtonReleased(Button.R2.value);
  }

  /**
   * Constructs an event instance around the right trigger 2 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the right trigger 2 button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent R2(EventLoop loop) {
    return button(Button.R2.value, loop);
  }

  /**
   * Read the value of the create button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getCreateButton() {
    return getRawButton(Button.CREATE.value);
  }

  /**
   * Whether the create button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getCreateButtonPressed() {
    return getRawButtonPressed(Button.CREATE.value);
  }

  /**
   * Whether the create button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getCreateButtonReleased() {
    return getRawButtonReleased(Button.CREATE.value);
  }

  /**
   * Constructs an event instance around the create button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the create button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent create(EventLoop loop) {
    return button(Button.CREATE.value, loop);
  }

  /**
   * Read the value of the options button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getOptionsButton() {
    return getRawButton(Button.OPTIONS.value);
  }

  /**
   * Whether the options button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getOptionsButtonPressed() {
    return getRawButtonPressed(Button.OPTIONS.value);
  }

  /**
   * Whether the options button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getOptionsButtonReleased() {
    return getRawButtonReleased(Button.OPTIONS.value);
  }

  /**
   * Constructs an event instance around the options button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the options button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent options(EventLoop loop) {
    return button(Button.OPTIONS.value, loop);
  }

  /**
   * Read the value of the L3 (left stick) button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getL3Button() {
    return getRawButton(Button.L3.value);
  }

  /**
   * Whether the L3 (left stick) button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getL3ButtonPressed() {
    return getRawButtonPressed(Button.L3.value);
  }

  /**
   * Whether the L3 (left stick) button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getL3ButtonReleased() {
    return getRawButtonReleased(Button.L3.value);
  }

  /**
   * Constructs an event instance around the L3 (left stick) button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the L3 (left stick) button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent L3(EventLoop loop) {
    return button(Button.L3.value, loop);
  }

  /**
   * Read the value of the R3 (right stick) button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getR3Button() {
    return getRawButton(Button.R3.value);
  }

  /**
   * Whether the R3 (right stick) button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getR3ButtonPressed() {
    return getRawButtonPressed(Button.R3.value);
  }

  /**
   * Whether the R3 (right stick) button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getR3ButtonReleased() {
    return getRawButtonReleased(Button.R3.value);
  }

  /**
   * Constructs an event instance around the R3 (right stick) button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the R3 (right stick) button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent R3(EventLoop loop) {
    return button(Button.R3.value, loop);
  }

  /**
   * Read the value of the PlayStation button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getPSButton() {
    return getRawButton(Button.PS.value);
  }

  /**
   * Whether the PlayStation button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getPSButtonPressed() {
    return getRawButtonPressed(Button.PS.value);
  }

  /**
   * Whether the PlayStation button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getPSButtonReleased() {
    return getRawButtonReleased(Button.PS.value);
  }

  /**
   * Constructs an event instance around the PlayStation button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the PlayStation button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent PS(EventLoop loop) {
    return button(Button.PS.value, loop);
  }

  /**
   * Read the value of the touchpad button on the controller.
   *
   * @return The state of the button.
   */
  public boolean getTouchpadButton() {
    return getRawButton(Button.TOUCHPAD.value);
  }

  /**
   * Whether the touchpad button was pressed since the last check.
   *
   * @return Whether the button was pressed since the last check.
   */
  public boolean getTouchpadButtonPressed() {
    return getRawButtonPressed(Button.TOUCHPAD.value);
  }

  /**
   * Whether the touchpad button was released since the last check.
   *
   * @return Whether the button was released since the last check.
   */
  public boolean getTouchpadButtonReleased() {
    return getRawButtonReleased(Button.TOUCHPAD.value);
  }

  /**
   * Constructs an event instance around the touchpad button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return an event instance representing the touchpad button's digital signal
   *     attached to the given loop.
   */
  public BooleanEvent touchpad(EventLoop loop) {
    return button(Button.TOUCHPAD.value, loop);
  }

  /**
   * Read the value of the touchpad on the controller.
   *
   * @return The state of the touchpad.
   * @deprecated Use {@link getTouchpadButton} instead. This function is deprecated for removal to
   *     make function names consistent to allow the HID classes to be automatically generated.
   */
  @Deprecated(since = "2025", forRemoval = true)
  public boolean getTouchpad() {
    return getRawButton(Button.TOUCHPAD.value);
  }

  /**
   * Whether the touchpad was pressed since the last check.
   *
   * @return Whether the touchpad was pressed since the last check.
   * @deprecated Use {@link getTouchpadButtonPressed} instead. This function is deprecated for
   *     removal to make function names consistent to allow the HID classes to be automatically
   *     generated.
   */
  @Deprecated(since = "2025", forRemoval = true)
  public boolean getTouchpadPressed() {
    return getRawButtonPressed(Button.TOUCHPAD.value);
  }

  /**
   * Whether the touchpad was released since the last check.
   *
   * @return Whether the touchpad was released since the last check.
   * @deprecated Use {@link getTouchpadButtonReleased} instead. This function is deprecated for
   *     removal to make function names consistent to allow the HID classes to be automatically
   *     generated.
   */
  @Deprecated(since = "2025", forRemoval = true)
  public boolean getTouchpadReleased() {
    return getRawButtonReleased(Button.TOUCHPAD.value);
  }

  @Override
  public void initSendable(SendableBuilder builder) {
    builder.setSmartDashboardType("HID");
    builder.publishConstString("ControllerType", "PS5");
    builder.addDoubleProperty("L2", this::getL2Axis, null);
    builder.addDoubleProperty("R2", this::getR2Axis, null);
    builder.addDoubleProperty("LeftX", this::getLeftX, null);
    builder.addDoubleProperty("LeftY", this::getLeftY, null);
    builder.addDoubleProperty("RightX", this::getRightX, null);
    builder.addDoubleProperty("RightY", this::getRightY, null);
    builder.addBooleanProperty("Square", this::getSquareButton, null);
    builder.addBooleanProperty("Cross", this::getCrossButton, null);
    builder.addBooleanProperty("Circle", this::getCircleButton, null);
    builder.addBooleanProperty("Triangle", this::getTriangleButton, null);
    builder.addBooleanProperty("L1", this::getL1Button, null);
    builder.addBooleanProperty("R1", this::getR1Button, null);
    builder.addBooleanProperty("L2", this::getL2Button, null);
    builder.addBooleanProperty("R2", this::getR2Button, null);
    builder.addBooleanProperty("Create", this::getCreateButton, null);
    builder.addBooleanProperty("Options", this::getOptionsButton, null);
    builder.addBooleanProperty("L3", this::getL3Button, null);
    builder.addBooleanProperty("R3", this::getR3Button, null);
    builder.addBooleanProperty("PS", this::getPSButton, null);
    builder.addBooleanProperty("Touchpad", this::getTouchpadButton, null);
  }
}

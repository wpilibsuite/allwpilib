load("@allwpilib_pip_deps//:requirements.bzl", "requirement")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("//shared/bazel/rules:cc_rules.bzl", "third_party_cc_lib_helper", "wpilib_cc_library", "wpilib_cc_shared_library", "wpilib_cc_static_library")
load("//shared/bazel/rules:java_rules.bzl", "wpilib_java_junit5_test")
load("//shared/bazel/rules:jni_rules.bzl", "wpilib_jni_cc_library", "wpilib_jni_java_library")
load("//shared/bazel/rules:packaging.bzl", "package_default_jni_project")
load("//shared/bazel/rules/gen:gen-resources.bzl", "generate_resources")
load("//shared/bazel/rules/robotpy:build_info_gen.bzl", "generate_robotpy_native_wrapper_build_info", "generate_robotpy_pybind_build_info")
load("//shared/bazel/rules/robotpy:pybind_rules.bzl", "create_pybind_library")
load("//shared/bazel/rules/robotpy:pytest_util.bzl", "robotpy_py_test")
load("//wpiutil:generate.bzl", "generate_wpiutil")
load("//wpiutil:robotpy_native_build_info.bzl", "define_native_wrapper")
load("//wpiutil:robotpy_pybind_build_info.bzl", "define_pybind_library", "publish_library_casters", "wpiutil_extension")

filegroup(
    name = "doxygen-files",
    srcs = glob([
        "src/main/native/include/**/*",
        "src/main/native/thirdparty/argparse/include/**/*",
        "src/main/native/thirdparty/debugging/include/**/*",
        "src/main/native/thirdparty/expected/include/**/*",
        "src/main/native/thirdparty/fmtlib/include/**/*",
        "src/main/native/thirdparty/json/include/**/*",
        "src/main/native/thirdparty/llvm/include/**/*",
        "src/main/native/thirdparty/mpack/include/**/*",
        "src/main/native/thirdparty/nanopb/include/**/*",
        "src/main/native/thirdparty/sigslot/include/**/*",
    ]),
    visibility = ["//visibility:public"],
)

exports_files(["src/main/native/resources/wpilib-128.png"])

py_binary(
    name = "nanopb_generator",
    srcs = glob(["src/main/native/thirdparty/nanopb/generator/**/*.py"]),
    data = ["src/main/native/thirdparty/nanopb/generator/proto/nanopb.proto"],
    imports = ["."],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        requirement("protobuf"),
        requirement("grpcio-tools"),
    ],
)

py_binary(
    name = "generate_nanopb",
    srcs = ["generate_nanopb.py"],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

filegroup(
    name = "proto_files",
    srcs = glob(["src/test/proto/*.proto"]),
)

generate_wpiutil(
    name = "generate_wpiutil",
    proto_files = ":proto_files",
)

write_source_files(
    name = "write_wpiutil",
    files = {
        "src/generated/test/native/cpp": ":generate_wpiutil",
    },
    suggested_update_target = "//:write_all",
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

third_party_cc_lib_helper(
    name = "argparse",
    include_root = "src/main/native/thirdparty/argparse/include",
    src_root = None,
)

third_party_cc_lib_helper(
    name = "debugging",
    include_root = "src/main/native/thirdparty/debugging/include",
    src_root = "src/main/native/thirdparty/debugging/src",
)

third_party_cc_lib_helper(
    name = "expected",
    include_root = "src/main/native/thirdparty/expected/include",
)

third_party_cc_lib_helper(
    name = "fmtlib",
    include_root = "src/main/native/thirdparty/fmtlib/include",
    src_root = "src/main/native/thirdparty/fmtlib/src",
)

third_party_cc_lib_helper(
    name = "json",
    include_root = "src/main/native/thirdparty/json/include",
)

third_party_cc_lib_helper(
    name = "llvm",
    include_root = "src/main/native/thirdparty/llvm/include",
    src_root = "src/main/native/thirdparty/llvm/cpp",
)

third_party_cc_lib_helper(
    name = "mpack",
    include_root = "src/main/native/thirdparty/mpack/include",
    src_root = "src/main/native/thirdparty/mpack/src",
)

third_party_cc_lib_helper(
    name = "nanopb",
    include_root = "src/main/native/thirdparty/nanopb/include",
    src_root = "src/main/native/thirdparty/nanopb/src",
)

third_party_cc_lib_helper(
    name = "sigslot",
    include_root = "src/main/native/thirdparty/sigslot/include",
)

third_party_cc_lib_helper(
    name = "upb",
    include_root = "src/main/native/thirdparty/upb/include",
    src_root = "src/main/native/thirdparty/upb/src",
)

generate_resources(
    name = "generate-resources",
    namespace = "wpi",
    prefix = "WPI",
    resource_files = glob(["src/main/native/resources/*"]),
)

filegroup(
    name = "native-srcs",
    srcs = select({
        "@platforms//os:windows": glob(["src/main/native/windows/*.cpp"]),
        "@rules_bzlmodrio_toolchains//constraints/combined:is_unix": glob(["src/main/native/unix/*.cpp"]),
    }),
)

wpilib_cc_library(
    name = "wpiutil",
    srcs = glob(
        ["src/main/native/cpp/**"],
        exclude = ["src/main/native/cpp/jni/**"],
    ) + [
        ":generate-resources",
        ":native-srcs",
    ],
    hdrs = glob(["src/main/native/include/**/*"]),
    extra_src_pkg_files = [":wpiutil-java-jni-hdrs-pkg"],
    includes = ["src/main/native/include"],
    strip_include_prefix = "src/main/native/include",
    third_party_header_only_libraries = [
        ":argparse",
        ":expected",
        ":json",
        ":sigslot",
    ],
    third_party_libraries = [
        ":debugging",
        ":fmtlib",
        ":llvm",
        ":mpack",
        ":nanopb",
        ":upb",
    ],
    visibility = ["//visibility:public"],
    deps = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@bzlmodrio-ni//libraries/cpp/ni:shared"],
        "//conditions:default": [],
    }),
)

wpilib_cc_shared_library(
    name = "shared/wpiutil",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

wpilib_cc_static_library(
    name = "static/wpiutil",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

cc_library(
    name = "wpiutil-jni-hdrs",
    hdrs = glob([
        "src/main/native/include/**",
        "src/main/native/thirdparty/llvm/include/**",
        "src/main/native/thirdparty/fmtlib/include/**",
    ]),
    includes = [
        "src/main/native/include",
        "src/main/native/thirdparty/fmtlib/include",
        "src/main/native/thirdparty/llvm/include",
    ],
)

wpilib_jni_cc_library(
    name = "wpiutiljni",
    srcs = glob(["src/main/native/cpp/jni/**"]),
    java_dep = ":wpiutil-java",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

wpilib_cc_shared_library(
    name = "shared/wpiutiljni",
    auto_export_windows_symbols = False,
    dynamic_deps = [
        ":shared/wpiutil",
    ],
    use_debug_name = False,
    visibility = ["//visibility:public"],
    deps = [":wpiutiljni"],
)

wpilib_cc_static_library(
    name = "static/wpiutiljni",
    static_deps = [
        ":static/wpiutil",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutiljni",
    ],
)

wpilib_jni_java_library(
    name = "wpiutil-java",
    srcs = glob(["src/main/java/**/*.java"]),
    maven_artifact_name = "wpiutil-java",
    maven_group_id = "edu.wpi.first.wpiutil",
    native_libs = [":wpiutiljni"],
    visibility = ["//visibility:public"],
    deps = [
        "@maven//:com_fasterxml_jackson_core_jackson_annotations",
        "@maven//:com_fasterxml_jackson_core_jackson_core",
        "@maven//:com_fasterxml_jackson_core_jackson_databind",
        "@maven//:us_hebi_quickbuf_quickbuf_runtime",
    ],
)

cc_library(
    name = "wpiutil-testlib",
    hdrs = glob(["src/test/native/include/**"]),
    strip_include_prefix = "src/test/native/include",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "nanopb-test-headers",
    hdrs = glob(["src/generated/test/native/cpp/*.h"]),
    includes = ["src/generated/test/native/cpp"],
    strip_include_prefix = "src/generated/test/native/cpp",
)

CATCH2_SRCS = [
    "src/test/native/cpp/TestCatch2.cpp",
    "src/test/native/cpp/catch2main.cpp",
]

cc_test(
    name = "wpiutil-gtest-cpp-test",
    size = "small",
    srcs = glob(
        [
            "src/test/native/cpp/**",
            "src/generated/test/native/cpp/*",
        ],
        exclude = CATCH2_SRCS,
    ),
    linkstatic = True,
    tags = ["no-tsan"],  # TODO(pj.reiniger) Find problem
    deps = [
        ":nanopb-test-headers",
        ":wpiutil",
        ":wpiutil-testlib",
        "//thirdparty/catch2:catch2.static",
        "//thirdparty/googletest",
    ],
)

cc_test(
    name = "wpiutil-catch2-cpp-test",
    size = "small",
    srcs = CATCH2_SRCS,
    linkstatic = True,
    deps = [
        ":wpiutil",
        ":wpiutil-testlib",
        "//thirdparty/catch2:catch2.static",
    ],
)

wpilib_java_junit5_test(
    name = "wpiutil-java-test",
    srcs = glob(["src/test/java/**/*.java"]),
    deps = [
        ":wpiutil-java",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpiutil",
    ],
)

java_binary(
    name = "DevMain-Java",
    srcs = ["src/dev/java/edu/wpi/first/util/DevMain.java"],
    main_class = "edu.wpi.first.util.DevMain",
    deps = [
        ":wpiutil-java",
    ],
)

generate_robotpy_native_wrapper_build_info(
    name = "robotpy-native-wpiutil-generator",
    pyproject_toml = "src/main/python/native-pyproject.toml",
    third_party_dirs = [
        "argparse",
        "debugging",
        "expected",
        "fmtlib",
        "json",
        "llvm",
        "mpack",
        "nanopb",
        "sigslot",
        "upb",
    ],
)

define_native_wrapper(
    name = "robotpy-native-wpiutil",
)

PYBIND_PKGCFG_DEPS = ["//wpiutil:native/wpiutil/robotpy-native-wpiutil.pc"]

generate_robotpy_pybind_build_info(
    name = "robotpy-wpiutil-generator",
    additional_srcs = ["src/main/python/wpiutil/src/wpistruct/wpystruct_fns.h"] + [":robotpy-native-wpiutil.copy_headers"],
    package_root_file = "src/main/python/wpiutil/__init__.py",
    pkgcfgs = PYBIND_PKGCFG_DEPS,
    pyproject_toml = "src/main/python/pyproject.toml",
    yaml_files = glob(["src/main/python/semiwrap/*.yml"]),
)

publish_library_casters()

wpiutil_extension(
    srcs = glob(["src/main/python/wpiutil/src/**/*.cpp"]),
    extra_hdrs = glob([
        "src/main/python/wpiutil/src/type_casters/*.h",
        "src/main/python/wpiutil/src/wpistruct/*.h",
    ]),
    header_to_dat_deps = ["src/main/python/wpiutil/src/wpistruct/wpystruct_fns.h"],
    includes = [
        "src/main/python/wpiutil/",
        "src/main/python/wpiutil/src/type_casters",
        "src/main/python/wpiutil/src/wpistruct",
    ],
)

define_pybind_library(
    name = "robotpy-wpiutil",
    pkgcfgs = PYBIND_PKGCFG_DEPS,
)

create_pybind_library(
    name = "module",
    dynamic_deps = [
        ":shared/wpiutil",
    ],
    extension_name = "module",
    extra_srcs = glob(["src/test/python/cpp/wpiutil_test/*.cpp"]),
    install_path = "src/test/python/cpp/wpiutil_test/",
    deps = [
        ":wpiutil_pybind_library",
    ],
)

py_library(
    name = "wpiutil_test",
    srcs = glob(["src/test/python/cpp/wpiutil_test/*.py"]),
    data = [
        ":src/test/python/cpp/wpiutil_test/module",
    ],
    imports = ["src/test/python/cpp"],
    visibility = ["//visibility:public"],
)

robotpy_py_test(
    "wpiutil_tests",
    srcs = glob(
        ["src/test/python/**/*.py"],
        exclude = ["src/test/python/cpp/**"],
    ),
    deps = [
        ":robotpy-wpiutil",
        ":wpiutil_test",
        requirement("pytest"),
    ],
)

package_default_jni_project(
    name = "wpiutil",
    maven_artifact_name = "wpiutil-cpp",
    maven_group_id = "edu.wpi.first.wpiutil",
)

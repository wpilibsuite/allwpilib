load("@allwpilib_pip_deps//:requirements.bzl", "requirement")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_pkg//:mappings.bzl", "pkg_filegroup", "pkg_files")
load("@rules_pkg//pkg:zip.bzl", "pkg_zip")
load("@rules_python//python:defs.bzl", "py_binary")
load("//shared/bazel/rules:cc_rules.bzl", "third_party_cc_lib_helper", "wpilib_cc_library", "wpilib_cc_shared_library", "wpilib_cc_static_library")
load("//shared/bazel/rules:java_rules.bzl", "wpilib_java_junit5_test")
load("//shared/bazel/rules:jni_rules.bzl", "wpilib_jni_cc_library", "wpilib_jni_java_library")
load("//shared/bazel/rules:packaging.bzl", "pkg_java_files")
load("//shared/bazel/rules:publishing.bzl", "architectures_pkg_zip", "platform_prefix", "wpilib_maven_export")
load("//shared/bazel/rules/gen:gen-resources.bzl", "generate_resources")
load("//wpiutil:generate.bzl", "generate_wpiutil")

py_binary(
    name = "nanopb_generator",
    srcs = glob(["src/main/native/thirdparty/nanopb/generator/**/*.py"]),
    data = ["src/main/native/thirdparty/nanopb/generator/proto/nanopb.proto"],
    imports = ["."],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        requirement("protobuf"),
        requirement("grpcio-tools"),
    ],
)

py_binary(
    name = "generate_nanopb",
    srcs = ["generate_nanopb.py"],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

filegroup(
    name = "proto_files",
    srcs = glob(["src/test/proto/*.proto"]),
)

generate_wpiutil(
    name = "generate_wpiutil",
    proto_files = ":proto_files",
)

write_source_files(
    name = "write_wpiutil",
    files = {
        "src/generated/test/native/cpp": ":generate_wpiutil",
    },
    suggested_update_target = "//:write_all",
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

third_party_cc_lib_helper(
    name = "argparse",
    include_root = "src/main/native/thirdparty/argparse/include",
    src_root = None,
)

third_party_cc_lib_helper(
    name = "debugging",
    include_root = "src/main/native/thirdparty/debugging/include",
    src_root = "src/main/native/thirdparty/debugging/src",
)

third_party_cc_lib_helper(
    name = "expected",
    include_root = "src/main/native/thirdparty/expected/include",
)

third_party_cc_lib_helper(
    name = "fmtlib",
    include_root = "src/main/native/thirdparty/fmtlib/include",
    src_root = "src/main/native/thirdparty/fmtlib/src",
)

third_party_cc_lib_helper(
    name = "json",
    include_root = "src/main/native/thirdparty/json/include",
)

third_party_cc_lib_helper(
    name = "llvm",
    include_root = "src/main/native/thirdparty/llvm/include",
    src_root = "src/main/native/thirdparty/llvm/cpp",
)

third_party_cc_lib_helper(
    name = "mpack",
    include_root = "src/main/native/thirdparty/mpack/include",
    src_root = "src/main/native/thirdparty/mpack/src",
)

third_party_cc_lib_helper(
    name = "protobuf",
    include_root = "src/main/native/thirdparty/protobuf/include",
    src_root = "src/main/native/thirdparty/protobuf/src",
)

third_party_cc_lib_helper(
    name = "nanopb",
    include_root = "src/main/native/thirdparty/nanopb/include",
    src_root = "src/main/native/thirdparty/nanopb/src",
)

third_party_cc_lib_helper(
    name = "sigslot",
    include_root = "src/main/native/thirdparty/sigslot/include",
)

generate_resources(
    name = "generate-resources",
    namespace = "wpi",
    prefix = "WPI",
    resource_files = glob(["src/main/native/resources/*"]),
)

filegroup(
    name = "native-srcs",
    srcs = select({
        "@bazel_tools//src/conditions:windows": glob(["src/main/native/windows/*.cpp"]),
        "@rules_bzlmodrio_toolchains//constraints/combined:is_unix": glob(["src/main/native/unix/*.cpp"]),
    }),
)

wpilib_cc_library(
    name = "wpiutil",
    srcs = glob(
        ["src/main/native/cpp/**"],
        exclude = ["src/main/native/cpp/jni/**"],
    ) + [
        ":generate-resources",
        ":native-srcs",
    ],
    hdrs = glob(["src/main/native/include/**/*"]),
    extra_src_pkg_files = [":wpiutil-java-jni-hdrs-pkg"],
    includes = ["src/main/native/include"],
    strip_include_prefix = "src/main/native/include",
    third_party_header_only_libraries = [
        ":argparse",
        ":expected",
        ":json",
        ":sigslot",
    ],
    third_party_libraries = [
        ":debugging",
        ":fmtlib",
        ":llvm",
        ":mpack",
        ":nanopb",
        ":protobuf",
    ],
    visibility = ["//visibility:public"],
    deps = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@bzlmodrio-ni//libraries/cpp/ni:shared"],
        "//conditions:default": [],
    }),
)

wpilib_cc_shared_library(
    name = "shared/wpiutil",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

wpilib_cc_static_library(
    name = "static/wpiutil",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

cc_library(
    name = "wpiutil-jni-hdrs",
    hdrs = glob([
        "src/main/native/include/**",
        "src/main/native/thirdparty/llvm/include/**",
        "src/main/native/thirdparty/fmtlib/include/**",
    ]),
    includes = [
        "src/main/native/include",
        "src/main/native/thirdparty/fmtlib/include",
        "src/main/native/thirdparty/llvm/include",
    ],
)

wpilib_jni_cc_library(
    name = "wpiutiljni",
    srcs = glob(["src/main/native/cpp/jni/**"]),
    java_dep = ":wpiutil-java",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutil",
    ],
)

wpilib_cc_shared_library(
    name = "shared/wpiutiljni",
    auto_export_windows_symbols = False,
    dynamic_deps = [
        ":shared/wpiutil",
    ],
    visibility = ["//visibility:public"],
    deps = [":wpiutiljni"],
)

wpilib_cc_static_library(
    name = "static/wpiutiljni",
    static_deps = [
        ":static/wpiutil",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":wpiutiljni",
    ],
)

wpilib_jni_java_library(
    name = "wpiutil-java",
    srcs = glob(["src/main/java/**/*.java"]),
    native_libs = [":wpiutiljni"],
    tags = ["maven_coordinates=edu.wpi.first.wpiutil:wpiutil-java:$(WPILIB_VERSION)"],
    visibility = ["//visibility:public"],
    deps = [
        "@maven//:com_fasterxml_jackson_core_jackson_annotations",
        "@maven//:com_fasterxml_jackson_core_jackson_core",
        "@maven//:com_fasterxml_jackson_core_jackson_databind",
        "@maven//:us_hebi_quickbuf_quickbuf_runtime",
    ],
)

pkg_java_files(name = "wpiutil-java-srcs")

pkg_zip(
    name = "libwpiutil-java-sources",
    srcs = [":wpiutil-java-srcs"],
    out = "libwpiutil-java-sources.jar",
)

cc_library(
    name = "wpiutil-testlib",
    hdrs = glob(["src/test/native/include/**"]),
    strip_include_prefix = "src/test/native/include",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "nanopb-test-headers",
    hdrs = glob(["src/generated/test/native/cpp/*.h"]),
    includes = ["src/generated/test/native/cpp"],
    strip_include_prefix = "src/generated/test/native/cpp",
)

cc_test(
    name = "wpiutil-cpp-test",
    size = "small",
    srcs = glob([
        "src/test/native/cpp/**",
        "src/generated/test/native/cpp/*",
    ]),
    linkstatic = True,
    tags = ["no-tsan"],  # TODO(pj.reiniger) Find problem
    deps = [
        ":nanopb-test-headers",
        ":wpiutil",
        ":wpiutil-testlib",
        "//thirdparty/googletest",
    ],
)

wpilib_java_junit5_test(
    name = "wpiutil-java-test",
    srcs = glob(["src/test/java/**/*.java"]),
    deps = [
        ":wpiutil-java",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpiutil",
    ],
)

java_binary(
    name = "DevMain-Java",
    srcs = ["src/dev/java/edu/wpi/first/util/DevMain.java"],
    main_class = "edu.wpi.first.util.DevMain",
    deps = [
        ":wpiutil-java",
    ],
)

pkg_files(
    name = "wpiutil-static-files",
    srcs = [
        ":static/wpiutil",
    ],
    prefix = platform_prefix("static"),
    strip_prefix = "static",
)

pkg_filegroup(
    name = "wpiutil-shared-files",
    srcs = [
        ":shared/libwpiutil-shared-files",
        ":shared/libwpiutiljni-shared-files",
    ],
    prefix = platform_prefix("shared"),
)

architectures_pkg_zip(
    name = "wpiutil_static_zip",
    srcs = [
        ":wpiutil-static-files",
        "//:license_pkg_files",
    ],
)

architectures_pkg_zip(
    name = "wpiutil_shared_zip",
    srcs = [
        ":wpiutil-shared-files",
        "//:license_pkg_files",
    ],
)

wpilib_maven_export(
    name = "wpiutil-cpp_publish",
    classifier_artifacts = {
        "headers": ":wpiutil-hdrs-zip",
        "linuxsystemcore": ":wpiutil_shared_zip-opt-systemcore",
        "linuxsystemcoredebug": ":wpiutil_shared_zip-dbg-systemcore",
        "linuxsystemcorestatic": ":wpiutil_static_zip-opt-systemcore",
        "linuxsystemcorestaticdebug": ":wpiutil_static_zip-dbg-systemcore",
        "sources": ":wpiutil-srcs-zip",
    },
    linux_artifacts = {
        "linuxx86-64": ":wpiutil_shared_zip-opt-linux-x86-64",
        "linuxx86-64debug": ":wpiutil_shared_zip-dbg-linux-x86-64",
        "linuxx86-64static": ":wpiutil_static_zip-opt-linux-x86-64",
        "linuxx86-64staticdebug": ":wpiutil_static_zip-dbg-linux-x86-64",
    },
    maven_coordinates = "edu.wpi.first.wpiutil:wpiutil-cpp:$(WPILIB_VERSION)",
    osx_artifacts = {
        "osxuniversal": ":wpiutil_shared_zip-opt-osxuniversal",
        "osxuniversaldebug": ":wpiutil_shared_zip-dbg-osxuniversal",
        "osxuniversalstatic": ":wpiutil_static_zip-opt-osxuniversal",
        "osxuniversalstaticdebug": ":wpiutil_static_zip-dbg-osxuniversal",
    },
    visibility = ["//visibility:public"],
    windows_artifacts = {
        "windowsarm64": ":wpiutil_shared_zip-opt-windows-arm64",
        "windowsarm64debug": ":wpiutil_shared_zip-dbg-windows-arm64",
        "windowsarm64static": ":wpiutil_static_zip-opt-windows-arm64",
        "windowsarm64staticdebug": ":wpiutil_static_zip-dbg-windows-arm64",
        "windowsx86-64": ":wpiutil_shared_zip-opt-windows-x86-64",
        "windowsx86-64debug": ":wpiutil_shared_zip-dbg-windows-x86-64",
        "windowsx86-64static": ":wpiutil_static_zip-opt-windows-x86-64",
        "windowsx86-64staticdebug": ":wpiutil_static_zip-dbg-windows-x86-64",
    },
)

wpilib_maven_export(
    name = "wpiutil-java_publish",
    classifier_artifacts = {"sources": ":libwpiutil-java-sources.jar"},
    lib_name = "wpiutil-java",
    maven_coordinates = "edu.wpi.first.wpiutil:wpiutil-java:$(WPILIB_VERSION)",
    visibility = ["//visibility:public"],
)

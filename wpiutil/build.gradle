apply from: "${rootDir}/shared/resources.gradle"

ext {
    noWpiutil = true
    skipJniSymbols = [
        'Java_edu_wpi_first_util_CombinedRuntimeLoader_setDllDirectory'
    ]
    baseId = 'wpiutil'
    groupId = 'edu.wpi.first.wpiutil'

    nativeName = 'wpiutil'
    devMain = 'edu.wpi.first.util.DevMain'
    def generateTask = createGenerateResourcesTask('main', 'WPI', 'wpi', project)

    splitSetup = {
        it.tasks.withType(CppCompile) {
            dependsOn generateTask
        }
        it.sources {
            debuggingCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/debugging/src'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/debugging/include'
                }
            }
            fmtlibCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/fmtlib/src'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/fmtlib/include'
                }
            }
            jsonCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/json/cpp'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/json/include'
                }
            }
            llvmCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/llvm/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/include', 'src/main/native/thirdparty/expected/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/llvm/include'
                }
            }
            mpackCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/mpack/src'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/mpack/include'
                }
            }
            nanopbCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/nanopb/src'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/nanopb/include'
                }
            }
            sigslotCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/sigslot/src'
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/sigslot/include'
                }
            }
            protobufCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/protobuf/src'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/protobuf/include'
                }
            }
            resourcesCpp(CppSourceSet) {
                source {
                    srcDirs "$buildDir/generated/main/cpp", "$rootDir/shared/singlelib"
                    include '*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/include'
                }
            }
        }
        if (!it.targetPlatform.operatingSystem.isWindows()) {
            it.cppCompiler.define '_GNU_SOURCE'
            it.sources {
                wpiutilUnixCpp(CppSourceSet) {
                    source {
                        srcDirs 'src/main/native/unix'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include', 'src/main/native/cpp', 'src/main/native/thirdparty/llvm/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/sigslot/include', 'src/main/native/thirdparty/mpack/include', 'src/main/native/thirdparty/nanopb/include'
                        include '**/*.h'
                    }
                }
            }
        }
        if (it.targetPlatform.operatingSystem.isWindows()) {
            it.sources {
                wpiutilWindowsCpp(CppSourceSet) {
                    source {
                        srcDirs 'src/main/native/windows'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include', 'src/main/native/cpp', 'src/main/native/thirdparty/llvm/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/sigslot/include', 'src/main/native/thirdparty/json/include', 'src/main/native/thirdparty/mpack/include', 'src/main/native/thirdparty/nanopb/include'
                        include '**/*.h'
                    }
                }
            }
        } else if (it.targetPlatform.operatingSystem.isMacOsX()) {
            it.sources {
                wpiutilmacOSCpp(CppSourceSet) {
                    source {
                        srcDirs 'src/main/native/macOS'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include', 'src/main/native/cpp', 'src/main/native/thirdparty/llvm/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/sigslot/include', 'src/main/native/thirdparty/json/include', 'src/main/native/thirdparty/mpack/include', 'src/main/native/thirdparty/nanopb/include'
                        include '**/*.h'
                    }
                }
            }
        } else {
            it.sources {
                wpiutilLinuxCpp(CppSourceSet) {
                    source {
                        srcDirs 'src/main/native/linux'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include', 'src/main/native/cpp', 'src/main/native/thirdparty/llvm/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/sigslot/include', 'src/main/native/thirdparty/json/include', 'src/main/native/thirdparty/mpack/include', 'src/main/native/thirdparty/nanopb/include'
                        include '**/*.h'
                    }
                }
            }
        }
    }
}

apply from: "${rootDir}/shared/jni/setupBuild.gradle"

nativeUtils.exportsConfigs {
    wpiutil {
    }
}

nativeUtils.platformConfigs.each {
    if (it.name.contains('windows')) {
        it.cppCompiler.args.add("/D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR")
    }
}

cppHeadersZip {
    def thirdpartyIncDirs = [
        'src/main/native/thirdparty/argparse/include',
        'src/main/native/thirdparty/debugging/include',
        'src/main/native/thirdparty/expected/include',
        'src/main/native/thirdparty/fmtlib/include',
        'src/main/native/thirdparty/htrie/include',
        'src/main/native/thirdparty/json/include',
        'src/main/native/thirdparty/llvm/include',
        'src/main/native/thirdparty/mpack/include',
        'src/main/native/thirdparty/nanopb/include',
        'src/main/native/thirdparty/sigslot/include',
        'src/main/native/thirdparty/protobuf/include'
    ]

    thirdpartyIncDirs.each {
        ext.includeDirs << project.file(it)
        from(it) {
            into '/'
        }
    }
}

cppSourcesZip {
    from('src/main/native/thirdparty/fmtlib/src') {
        into '/'
    }
    from('src/main/native/thirdparty/json/cpp') {
        into '/'
    }
    from('src/main/native/thirdparty/llvm/cpp') {
        into '/'
    }
    from('src/main/native/thirdparty/mpack/src') {
        into '/'
    }
    from('src/main/native/thirdparty/nanopb/src') {
        into '/'
    }
    from('src/main/native/thirdparty/protobuf/src') {
        into '/'
    }
    from('src/main/native/thirdparty/sigslot/src') {
        into '/'
    }
}

model {
    components {
        all {
            it.sources.each {
                it.exportedHeaders {
                    srcDirs 'src/main/native/include', 'src/main/native/thirdparty/argparse/include/', 'src/main/native/thirdparty/debugging/include', 'src/main/native/thirdparty/expected/include', 'src/main/native/thirdparty/fmtlib/include', 'src/main/native/thirdparty/htrie/include', 'src/main/native/thirdparty/llvm/include', 'src/main/native/thirdparty/sigslot/include', 'src/main/native/thirdparty/json/include', 'src/main/native/thirdparty/mpack/include', 'src/main/native/thirdparty/protobuf/include', 'src/main/native/thirdparty/nanopb/include'
                }
            }
        }
    }
    testSuites {
        withType(GoogleTestTestSuiteSpec) {
            sources {
                protobufGenCpp(CppSourceSet) {
                    source {
                        srcDirs 'src/generated/test/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/generated/test/native/cpp'
                    }
                }
            }
            it.sources.each {
                it.exportedHeaders {
                    srcDirs 'src/test/native/include', 'src/generated/test/native/cpp'
                }
            }
        }
    }
}

dependencies {
    api "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    api "com.fasterxml.jackson.core:jackson-core:2.15.2"
    api "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    api 'us.hebi.quickbuf:quickbuf-runtime:1.3.3'
}

// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.
// Code generated by protocol buffer compiler. Do not edit!
package edu.wpi.first.math.proto;

import java.io.IOException;
import us.hebi.quickbuf.Descriptors;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.RepeatedByte;

public final class Controller {
  private static final RepeatedByte descriptorData = ProtoUtil.decodeBase64(1897,
    "ChBjb250cm9sbGVyLnByb3RvEgl3cGkucHJvdG8iaAoWUHJvdG9idWZBcm1GZWVkZm9yd2FyZBIOCgJr" + 
    "cxgBIAEoAVICa3MSDgoCa2cYAiABKAFSAmtnEg4KAmt2GAMgASgBUgJrdhIOCgJrYRgEIAEoAVICa2ES" + 
    "DgoCZHQYBSABKAFSAmR0Ip4BCiRQcm90b2J1ZkRpZmZlcmVudGlhbERyaXZlRmVlZGZvcndhcmQSGwoJ" + 
    "a3ZfbGluZWFyGAEgASgBUghrdkxpbmVhchIbCglrYV9saW5lYXIYAiABKAFSCGthTGluZWFyEh0KCmt2" + 
    "X2FuZ3VsYXIYAyABKAFSCWt2QW5ndWxhchIdCgprYV9hbmd1bGFyGAQgASgBUglrYUFuZ3VsYXIibQob" + 
    "UHJvdG9idWZFbGV2YXRvckZlZWRmb3J3YXJkEg4KAmtzGAEgASgBUgJrcxIOCgJrZxgCIAEoAVICa2cS" + 
    "DgoCa3YYAyABKAFSAmt2Eg4KAmthGAQgASgBUgJrYRIOCgJkdBgFIAEoAVICZHQiYAoeUHJvdG9idWZT" + 
    "aW1wbGVNb3RvckZlZWRmb3J3YXJkEg4KAmtzGAEgASgBUgJrcxIOCgJrdhgCIAEoAVICa3YSDgoCa2EY" + 
    "AyABKAFSAmthEg4KAmR0GAQgASgBUgJkdCJSCiZQcm90b2J1ZkRpZmZlcmVudGlhbERyaXZlV2hlZWxW" + 
    "b2x0YWdlcxISCgRsZWZ0GAEgASgBUgRsZWZ0EhQKBXJpZ2h0GAIgASgBUgVyaWdodEIaChhlZHUud3Bp" + 
    "LmZpcnN0Lm1hdGgucHJvdG9K9QkKBhIEAAAnAQoICgEMEgMAABIKCAoBAhIDAgASCggKAQgSAwQAMQoJ" + 
    "CgIIARIDBAAxCgoKAgQAEgQGAAwBCgoKAwQAARIDBggeCgsKBAQAAgASAwcCEAoMCgUEAAIABRIDBwII" + 
    "CgwKBQQAAgABEgMHCQsKDAoFBAACAAMSAwcODwoLCgQEAAIBEgMIAhAKDAoFBAACAQUSAwgCCAoMCgUE" + 
    "AAIBARIDCAkLCgwKBQQAAgEDEgMIDg8KCwoEBAACAhIDCQIQCgwKBQQAAgIFEgMJAggKDAoFBAACAgES" + 
    "AwkJCwoMCgUEAAICAxIDCQ4PCgsKBAQAAgMSAwoCEAoMCgUEAAIDBRIDCgIICgwKBQQAAgMBEgMKCQsK" + 
    "DAoFBAACAwMSAwoODwoLCgQEAAIEEgMLAhAKDAoFBAACBAUSAwsCCAoMCgUEAAIEARIDCwkLCgwKBQQA" + 
    "AgQDEgMLDg8KCgoCBAESBA4AEwEKCgoDBAEBEgMOCCwKCwoEBAECABIDDwIXCgwKBQQBAgAFEgMPAggK" + 
    "DAoFBAECAAESAw8JEgoMCgUEAQIAAxIDDxUWCgsKBAQBAgESAxACFwoMCgUEAQIBBRIDEAIICgwKBQQB" + 
    "AgEBEgMQCRIKDAoFBAECAQMSAxAVFgoLCgQEAQICEgMRAhgKDAoFBAECAgUSAxECCAoMCgUEAQICARID" + 
    "EQkTCgwKBQQBAgIDEgMRFhcKCwoEBAECAxIDEgIYCgwKBQQBAgMFEgMSAggKDAoFBAECAwESAxIJEwoM",
    "CgUEAQIDAxIDEhYXCgoKAgQCEgQVABsBCgoKAwQCARIDFQgjCgsKBAQCAgASAxYCEAoMCgUEAgIABRID" + 
    "FgIICgwKBQQCAgABEgMWCQsKDAoFBAICAAMSAxYODwoLCgQEAgIBEgMXAhAKDAoFBAICAQUSAxcCCAoM" + 
    "CgUEAgIBARIDFwkLCgwKBQQCAgEDEgMXDg8KCwoEBAICAhIDGAIQCgwKBQQCAgIFEgMYAggKDAoFBAIC" + 
    "AgESAxgJCwoMCgUEAgICAxIDGA4PCgsKBAQCAgMSAxkCEAoMCgUEAgIDBRIDGQIICgwKBQQCAgMBEgMZ" + 
    "CQsKDAoFBAICAwMSAxkODwoLCgQEAgIEEgMaAhAKDAoFBAICBAUSAxoCCAoMCgUEAgIEARIDGgkLCgwK" + 
    "BQQCAgQDEgMaDg8KCgoCBAMSBB0AIgEKCgoDBAMBEgMdCCYKCwoEBAMCABIDHgIQCgwKBQQDAgAFEgMe" + 
    "AggKDAoFBAMCAAESAx4JCwoMCgUEAwIAAxIDHg4PCgsKBAQDAgESAx8CEAoMCgUEAwIBBRIDHwIICgwK" + 
    "BQQDAgEBEgMfCQsKDAoFBAMCAQMSAx8ODwoLCgQEAwICEgMgAhAKDAoFBAMCAgUSAyACCAoMCgUEAwIC" + 
    "ARIDIAkLCgwKBQQDAgIDEgMgDg8KCwoEBAMCAxIDIQIQCgwKBQQDAgMFEgMhAggKDAoFBAMCAwESAyEJ" + 
    "CwoMCgUEAwIDAxIDIQ4PCgoKAgQEEgQkACcBCgoKAwQEARIDJAguCgsKBAQEAgASAyUCEgoMCgUEBAIA" + 
    "BRIDJQIICgwKBQQEAgABEgMlCQ0KDAoFBAQCAAMSAyUQEQoLCgQEBAIBEgMmAhMKDAoFBAQCAQUSAyYC" + 
    "CAoMCgUEBAIBARIDJgkOCgwKBQQEAgEDEgMmERJiBnByb3RvMw==");

  static final Descriptors.FileDescriptor descriptor = Descriptors.FileDescriptor.internalBuildGeneratedFileFrom("controller.proto", "wpi.proto", descriptorData);

  static final Descriptors.Descriptor wpi_proto_ProtobufArmFeedforward_descriptor = descriptor.internalContainedType(31, 104, "ProtobufArmFeedforward", "wpi.proto.ProtobufArmFeedforward");

  static final Descriptors.Descriptor wpi_proto_ProtobufDifferentialDriveFeedforward_descriptor = descriptor.internalContainedType(138, 158, "ProtobufDifferentialDriveFeedforward", "wpi.proto.ProtobufDifferentialDriveFeedforward");

  static final Descriptors.Descriptor wpi_proto_ProtobufElevatorFeedforward_descriptor = descriptor.internalContainedType(298, 109, "ProtobufElevatorFeedforward", "wpi.proto.ProtobufElevatorFeedforward");

  static final Descriptors.Descriptor wpi_proto_ProtobufSimpleMotorFeedforward_descriptor = descriptor.internalContainedType(409, 96, "ProtobufSimpleMotorFeedforward", "wpi.proto.ProtobufSimpleMotorFeedforward");

  static final Descriptors.Descriptor wpi_proto_ProtobufDifferentialDriveWheelVoltages_descriptor = descriptor.internalContainedType(507, 82, "ProtobufDifferentialDriveWheelVoltages", "wpi.proto.ProtobufDifferentialDriveWheelVoltages");

  /**
   * @return this proto file's descriptor.
   */
  public static Descriptors.FileDescriptor getDescriptor() {
    return descriptor;
  }

  /**
   * Protobuf type {@code ProtobufArmFeedforward}
   */
  public static final class ProtobufArmFeedforward extends ProtoMessage<ProtobufArmFeedforward> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional double ks = 1;</code>
     */
    private double ks;

    /**
     * <code>optional double kg = 2;</code>
     */
    private double kg;

    /**
     * <code>optional double kv = 3;</code>
     */
    private double kv;

    /**
     * <code>optional double ka = 4;</code>
     */
    private double ka;

    /**
     * <code>optional double dt = 5;</code>
     */
    private double dt;

    private ProtobufArmFeedforward() {
    }

    /**
     * @return a new empty instance of {@code ProtobufArmFeedforward}
     */
    public static ProtobufArmFeedforward newInstance() {
      return new ProtobufArmFeedforward();
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return whether the ks field is set
     */
    public boolean hasKs() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return this
     */
    public ProtobufArmFeedforward clearKs() {
      bitField0_ &= ~0x00000001;
      ks = 0D;
      return this;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return the ks
     */
    public double getKs() {
      return ks;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @param value the ks to set
     * @return this
     */
    public ProtobufArmFeedforward setKs(final double value) {
      bitField0_ |= 0x00000001;
      ks = value;
      return this;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return whether the kg field is set
     */
    public boolean hasKg() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return this
     */
    public ProtobufArmFeedforward clearKg() {
      bitField0_ &= ~0x00000002;
      kg = 0D;
      return this;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return the kg
     */
    public double getKg() {
      return kg;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @param value the kg to set
     * @return this
     */
    public ProtobufArmFeedforward setKg(final double value) {
      bitField0_ |= 0x00000002;
      kg = value;
      return this;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return whether the kv field is set
     */
    public boolean hasKv() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return this
     */
    public ProtobufArmFeedforward clearKv() {
      bitField0_ &= ~0x00000004;
      kv = 0D;
      return this;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return the kv
     */
    public double getKv() {
      return kv;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @param value the kv to set
     * @return this
     */
    public ProtobufArmFeedforward setKv(final double value) {
      bitField0_ |= 0x00000004;
      kv = value;
      return this;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return whether the ka field is set
     */
    public boolean hasKa() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return this
     */
    public ProtobufArmFeedforward clearKa() {
      bitField0_ &= ~0x00000008;
      ka = 0D;
      return this;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return the ka
     */
    public double getKa() {
      return ka;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @param value the ka to set
     * @return this
     */
    public ProtobufArmFeedforward setKa(final double value) {
      bitField0_ |= 0x00000008;
      ka = value;
      return this;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return whether the dt field is set
     */
    public boolean hasDt() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return this
     */
    public ProtobufArmFeedforward clearDt() {
      bitField0_ &= ~0x00000010;
      dt = 0D;
      return this;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return the dt
     */
    public double getDt() {
      return dt;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @param value the dt to set
     * @return this
     */
    public ProtobufArmFeedforward setDt(final double value) {
      bitField0_ |= 0x00000010;
      dt = value;
      return this;
    }

    @Override
    public ProtobufArmFeedforward copyFrom(final ProtobufArmFeedforward other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        ks = other.ks;
        kg = other.kg;
        kv = other.kv;
        ka = other.ka;
        dt = other.dt;
      }
      return this;
    }

    @Override
    public ProtobufArmFeedforward mergeFrom(final ProtobufArmFeedforward other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKs()) {
        setKs(other.ks);
      }
      if (other.hasKg()) {
        setKg(other.kg);
      }
      if (other.hasKv()) {
        setKv(other.kv);
      }
      if (other.hasKa()) {
        setKa(other.ka);
      }
      if (other.hasDt()) {
        setDt(other.dt);
      }
      return this;
    }

    @Override
    public ProtobufArmFeedforward clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ks = 0D;
      kg = 0D;
      kv = 0D;
      ka = 0D;
      dt = 0D;
      return this;
    }

    @Override
    public ProtobufArmFeedforward clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ProtobufArmFeedforward)) {
        return false;
      }
      ProtobufArmFeedforward other = (ProtobufArmFeedforward) o;
      return bitField0_ == other.bitField0_
        && (!hasKs() || ProtoUtil.isEqual(ks, other.ks))
        && (!hasKg() || ProtoUtil.isEqual(kg, other.kg))
        && (!hasKv() || ProtoUtil.isEqual(kv, other.kv))
        && (!hasKa() || ProtoUtil.isEqual(ka, other.ka))
        && (!hasDt() || ProtoUtil.isEqual(dt, other.dt));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 9);
        output.writeDoubleNoTag(ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 17);
        output.writeDoubleNoTag(kg);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 25);
        output.writeDoubleNoTag(kv);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 33);
        output.writeDoubleNoTag(ka);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 41);
        output.writeDoubleNoTag(dt);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 9;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ProtobufArmFeedforward mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 9: {
            // ks
            ks = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 17) {
              break;
            }
          }
          case 17: {
            // kg
            kg = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 25) {
              break;
            }
          }
          case 25: {
            // kv
            kv = input.readDouble();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 33) {
              break;
            }
          }
          case 33: {
            // ka
            ka = input.readDouble();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 41) {
              break;
            }
          }
          case 41: {
            // dt
            dt = input.readDouble();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.ks, ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.kg, kg);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeDouble(FieldNames.kv, kv);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeDouble(FieldNames.ka, ka);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeDouble(FieldNames.dt, dt);
      }
      output.endObject();
    }

    @Override
    public ProtobufArmFeedforward mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3432: {
            if (input.isAtField(FieldNames.ks)) {
              if (!input.trySkipNullValue()) {
                ks = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3420: {
            if (input.isAtField(FieldNames.kg)) {
              if (!input.trySkipNullValue()) {
                kg = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3435: {
            if (input.isAtField(FieldNames.kv)) {
              if (!input.trySkipNullValue()) {
                kv = input.readDouble();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3414: {
            if (input.isAtField(FieldNames.ka)) {
              if (!input.trySkipNullValue()) {
                ka = input.readDouble();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3216: {
            if (input.isAtField(FieldNames.dt)) {
              if (!input.trySkipNullValue()) {
                dt = input.readDouble();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ProtobufArmFeedforward clone() {
      return new ProtobufArmFeedforward().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ProtobufArmFeedforward parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ProtobufArmFeedforward(), data).checkInitialized();
    }

    public static ProtobufArmFeedforward parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ProtobufArmFeedforward(), input).checkInitialized();
    }

    public static ProtobufArmFeedforward parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ProtobufArmFeedforward(), input).checkInitialized();
    }

    /**
     * @return factory for creating ProtobufArmFeedforward messages
     */
    public static MessageFactory<ProtobufArmFeedforward> getFactory() {
      return ProtobufArmFeedforwardFactory.INSTANCE;
    }

    /**
     * @return this type's descriptor.
     */
    public static Descriptors.Descriptor getDescriptor() {
      return Controller.wpi_proto_ProtobufArmFeedforward_descriptor;
    }

    private enum ProtobufArmFeedforwardFactory implements MessageFactory<ProtobufArmFeedforward> {
      INSTANCE;

      @Override
      public ProtobufArmFeedforward create() {
        return ProtobufArmFeedforward.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName ks = FieldName.forField("ks");

      static final FieldName kg = FieldName.forField("kg");

      static final FieldName kv = FieldName.forField("kv");

      static final FieldName ka = FieldName.forField("ka");

      static final FieldName dt = FieldName.forField("dt");
    }
  }

  /**
   * Protobuf type {@code ProtobufDifferentialDriveFeedforward}
   */
  public static final class ProtobufDifferentialDriveFeedforward extends ProtoMessage<ProtobufDifferentialDriveFeedforward> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional double kv_linear = 1;</code>
     */
    private double kvLinear;

    /**
     * <code>optional double ka_linear = 2;</code>
     */
    private double kaLinear;

    /**
     * <code>optional double kv_angular = 3;</code>
     */
    private double kvAngular;

    /**
     * <code>optional double ka_angular = 4;</code>
     */
    private double kaAngular;

    private ProtobufDifferentialDriveFeedforward() {
    }

    /**
     * @return a new empty instance of {@code ProtobufDifferentialDriveFeedforward}
     */
    public static ProtobufDifferentialDriveFeedforward newInstance() {
      return new ProtobufDifferentialDriveFeedforward();
    }

    /**
     * <code>optional double kv_linear = 1;</code>
     * @return whether the kvLinear field is set
     */
    public boolean hasKvLinear() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double kv_linear = 1;</code>
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward clearKvLinear() {
      bitField0_ &= ~0x00000001;
      kvLinear = 0D;
      return this;
    }

    /**
     * <code>optional double kv_linear = 1;</code>
     * @return the kvLinear
     */
    public double getKvLinear() {
      return kvLinear;
    }

    /**
     * <code>optional double kv_linear = 1;</code>
     * @param value the kvLinear to set
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward setKvLinear(final double value) {
      bitField0_ |= 0x00000001;
      kvLinear = value;
      return this;
    }

    /**
     * <code>optional double ka_linear = 2;</code>
     * @return whether the kaLinear field is set
     */
    public boolean hasKaLinear() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double ka_linear = 2;</code>
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward clearKaLinear() {
      bitField0_ &= ~0x00000002;
      kaLinear = 0D;
      return this;
    }

    /**
     * <code>optional double ka_linear = 2;</code>
     * @return the kaLinear
     */
    public double getKaLinear() {
      return kaLinear;
    }

    /**
     * <code>optional double ka_linear = 2;</code>
     * @param value the kaLinear to set
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward setKaLinear(final double value) {
      bitField0_ |= 0x00000002;
      kaLinear = value;
      return this;
    }

    /**
     * <code>optional double kv_angular = 3;</code>
     * @return whether the kvAngular field is set
     */
    public boolean hasKvAngular() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional double kv_angular = 3;</code>
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward clearKvAngular() {
      bitField0_ &= ~0x00000004;
      kvAngular = 0D;
      return this;
    }

    /**
     * <code>optional double kv_angular = 3;</code>
     * @return the kvAngular
     */
    public double getKvAngular() {
      return kvAngular;
    }

    /**
     * <code>optional double kv_angular = 3;</code>
     * @param value the kvAngular to set
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward setKvAngular(final double value) {
      bitField0_ |= 0x00000004;
      kvAngular = value;
      return this;
    }

    /**
     * <code>optional double ka_angular = 4;</code>
     * @return whether the kaAngular field is set
     */
    public boolean hasKaAngular() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional double ka_angular = 4;</code>
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward clearKaAngular() {
      bitField0_ &= ~0x00000008;
      kaAngular = 0D;
      return this;
    }

    /**
     * <code>optional double ka_angular = 4;</code>
     * @return the kaAngular
     */
    public double getKaAngular() {
      return kaAngular;
    }

    /**
     * <code>optional double ka_angular = 4;</code>
     * @param value the kaAngular to set
     * @return this
     */
    public ProtobufDifferentialDriveFeedforward setKaAngular(final double value) {
      bitField0_ |= 0x00000008;
      kaAngular = value;
      return this;
    }

    @Override
    public ProtobufDifferentialDriveFeedforward copyFrom(
        final ProtobufDifferentialDriveFeedforward other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kvLinear = other.kvLinear;
        kaLinear = other.kaLinear;
        kvAngular = other.kvAngular;
        kaAngular = other.kaAngular;
      }
      return this;
    }

    @Override
    public ProtobufDifferentialDriveFeedforward mergeFrom(
        final ProtobufDifferentialDriveFeedforward other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKvLinear()) {
        setKvLinear(other.kvLinear);
      }
      if (other.hasKaLinear()) {
        setKaLinear(other.kaLinear);
      }
      if (other.hasKvAngular()) {
        setKvAngular(other.kvAngular);
      }
      if (other.hasKaAngular()) {
        setKaAngular(other.kaAngular);
      }
      return this;
    }

    @Override
    public ProtobufDifferentialDriveFeedforward clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kvLinear = 0D;
      kaLinear = 0D;
      kvAngular = 0D;
      kaAngular = 0D;
      return this;
    }

    @Override
    public ProtobufDifferentialDriveFeedforward clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ProtobufDifferentialDriveFeedforward)) {
        return false;
      }
      ProtobufDifferentialDriveFeedforward other = (ProtobufDifferentialDriveFeedforward) o;
      return bitField0_ == other.bitField0_
        && (!hasKvLinear() || ProtoUtil.isEqual(kvLinear, other.kvLinear))
        && (!hasKaLinear() || ProtoUtil.isEqual(kaLinear, other.kaLinear))
        && (!hasKvAngular() || ProtoUtil.isEqual(kvAngular, other.kvAngular))
        && (!hasKaAngular() || ProtoUtil.isEqual(kaAngular, other.kaAngular));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 9);
        output.writeDoubleNoTag(kvLinear);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 17);
        output.writeDoubleNoTag(kaLinear);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 25);
        output.writeDoubleNoTag(kvAngular);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 33);
        output.writeDoubleNoTag(kaAngular);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 9;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ProtobufDifferentialDriveFeedforward mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 9: {
            // kvLinear
            kvLinear = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 17) {
              break;
            }
          }
          case 17: {
            // kaLinear
            kaLinear = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 25) {
              break;
            }
          }
          case 25: {
            // kvAngular
            kvAngular = input.readDouble();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 33) {
              break;
            }
          }
          case 33: {
            // kaAngular
            kaAngular = input.readDouble();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.kvLinear, kvLinear);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.kaLinear, kaLinear);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeDouble(FieldNames.kvAngular, kvAngular);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeDouble(FieldNames.kaAngular, kaAngular);
      }
      output.endObject();
    }

    @Override
    public ProtobufDifferentialDriveFeedforward mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1424526448:
          case 974889081: {
            if (input.isAtField(FieldNames.kvLinear)) {
              if (!input.trySkipNullValue()) {
                kvLinear = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -33181669:
          case -1264389586: {
            if (input.isAtField(FieldNames.kaLinear)) {
              if (!input.trySkipNullValue()) {
                kaLinear = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 175208951:
          case -878647538: {
            if (input.isAtField(FieldNames.kvAngular)) {
              if (!input.trySkipNullValue()) {
                kvAngular = input.readDouble();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2064069716:
          case -1576809479: {
            if (input.isAtField(FieldNames.kaAngular)) {
              if (!input.trySkipNullValue()) {
                kaAngular = input.readDouble();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ProtobufDifferentialDriveFeedforward clone() {
      return new ProtobufDifferentialDriveFeedforward().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ProtobufDifferentialDriveFeedforward parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveFeedforward(), data).checkInitialized();
    }

    public static ProtobufDifferentialDriveFeedforward parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveFeedforward(), input).checkInitialized();
    }

    public static ProtobufDifferentialDriveFeedforward parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveFeedforward(), input).checkInitialized();
    }

    /**
     * @return factory for creating ProtobufDifferentialDriveFeedforward messages
     */
    public static MessageFactory<ProtobufDifferentialDriveFeedforward> getFactory() {
      return ProtobufDifferentialDriveFeedforwardFactory.INSTANCE;
    }

    /**
     * @return this type's descriptor.
     */
    public static Descriptors.Descriptor getDescriptor() {
      return Controller.wpi_proto_ProtobufDifferentialDriveFeedforward_descriptor;
    }

    private enum ProtobufDifferentialDriveFeedforwardFactory implements MessageFactory<ProtobufDifferentialDriveFeedforward> {
      INSTANCE;

      @Override
      public ProtobufDifferentialDriveFeedforward create() {
        return ProtobufDifferentialDriveFeedforward.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kvLinear = FieldName.forField("kvLinear", "kv_linear");

      static final FieldName kaLinear = FieldName.forField("kaLinear", "ka_linear");

      static final FieldName kvAngular = FieldName.forField("kvAngular", "kv_angular");

      static final FieldName kaAngular = FieldName.forField("kaAngular", "ka_angular");
    }
  }

  /**
   * Protobuf type {@code ProtobufElevatorFeedforward}
   */
  public static final class ProtobufElevatorFeedforward extends ProtoMessage<ProtobufElevatorFeedforward> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional double ks = 1;</code>
     */
    private double ks;

    /**
     * <code>optional double kg = 2;</code>
     */
    private double kg;

    /**
     * <code>optional double kv = 3;</code>
     */
    private double kv;

    /**
     * <code>optional double ka = 4;</code>
     */
    private double ka;

    /**
     * <code>optional double dt = 5;</code>
     */
    private double dt;

    private ProtobufElevatorFeedforward() {
    }

    /**
     * @return a new empty instance of {@code ProtobufElevatorFeedforward}
     */
    public static ProtobufElevatorFeedforward newInstance() {
      return new ProtobufElevatorFeedforward();
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return whether the ks field is set
     */
    public boolean hasKs() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return this
     */
    public ProtobufElevatorFeedforward clearKs() {
      bitField0_ &= ~0x00000001;
      ks = 0D;
      return this;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return the ks
     */
    public double getKs() {
      return ks;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @param value the ks to set
     * @return this
     */
    public ProtobufElevatorFeedforward setKs(final double value) {
      bitField0_ |= 0x00000001;
      ks = value;
      return this;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return whether the kg field is set
     */
    public boolean hasKg() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return this
     */
    public ProtobufElevatorFeedforward clearKg() {
      bitField0_ &= ~0x00000002;
      kg = 0D;
      return this;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @return the kg
     */
    public double getKg() {
      return kg;
    }

    /**
     * <code>optional double kg = 2;</code>
     * @param value the kg to set
     * @return this
     */
    public ProtobufElevatorFeedforward setKg(final double value) {
      bitField0_ |= 0x00000002;
      kg = value;
      return this;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return whether the kv field is set
     */
    public boolean hasKv() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return this
     */
    public ProtobufElevatorFeedforward clearKv() {
      bitField0_ &= ~0x00000004;
      kv = 0D;
      return this;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @return the kv
     */
    public double getKv() {
      return kv;
    }

    /**
     * <code>optional double kv = 3;</code>
     * @param value the kv to set
     * @return this
     */
    public ProtobufElevatorFeedforward setKv(final double value) {
      bitField0_ |= 0x00000004;
      kv = value;
      return this;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return whether the ka field is set
     */
    public boolean hasKa() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return this
     */
    public ProtobufElevatorFeedforward clearKa() {
      bitField0_ &= ~0x00000008;
      ka = 0D;
      return this;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @return the ka
     */
    public double getKa() {
      return ka;
    }

    /**
     * <code>optional double ka = 4;</code>
     * @param value the ka to set
     * @return this
     */
    public ProtobufElevatorFeedforward setKa(final double value) {
      bitField0_ |= 0x00000008;
      ka = value;
      return this;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return whether the dt field is set
     */
    public boolean hasDt() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return this
     */
    public ProtobufElevatorFeedforward clearDt() {
      bitField0_ &= ~0x00000010;
      dt = 0D;
      return this;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @return the dt
     */
    public double getDt() {
      return dt;
    }

    /**
     * <code>optional double dt = 5;</code>
     * @param value the dt to set
     * @return this
     */
    public ProtobufElevatorFeedforward setDt(final double value) {
      bitField0_ |= 0x00000010;
      dt = value;
      return this;
    }

    @Override
    public ProtobufElevatorFeedforward copyFrom(final ProtobufElevatorFeedforward other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        ks = other.ks;
        kg = other.kg;
        kv = other.kv;
        ka = other.ka;
        dt = other.dt;
      }
      return this;
    }

    @Override
    public ProtobufElevatorFeedforward mergeFrom(final ProtobufElevatorFeedforward other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKs()) {
        setKs(other.ks);
      }
      if (other.hasKg()) {
        setKg(other.kg);
      }
      if (other.hasKv()) {
        setKv(other.kv);
      }
      if (other.hasKa()) {
        setKa(other.ka);
      }
      if (other.hasDt()) {
        setDt(other.dt);
      }
      return this;
    }

    @Override
    public ProtobufElevatorFeedforward clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ks = 0D;
      kg = 0D;
      kv = 0D;
      ka = 0D;
      dt = 0D;
      return this;
    }

    @Override
    public ProtobufElevatorFeedforward clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ProtobufElevatorFeedforward)) {
        return false;
      }
      ProtobufElevatorFeedforward other = (ProtobufElevatorFeedforward) o;
      return bitField0_ == other.bitField0_
        && (!hasKs() || ProtoUtil.isEqual(ks, other.ks))
        && (!hasKg() || ProtoUtil.isEqual(kg, other.kg))
        && (!hasKv() || ProtoUtil.isEqual(kv, other.kv))
        && (!hasKa() || ProtoUtil.isEqual(ka, other.ka))
        && (!hasDt() || ProtoUtil.isEqual(dt, other.dt));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 9);
        output.writeDoubleNoTag(ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 17);
        output.writeDoubleNoTag(kg);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 25);
        output.writeDoubleNoTag(kv);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 33);
        output.writeDoubleNoTag(ka);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 41);
        output.writeDoubleNoTag(dt);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 9;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ProtobufElevatorFeedforward mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 9: {
            // ks
            ks = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 17) {
              break;
            }
          }
          case 17: {
            // kg
            kg = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 25) {
              break;
            }
          }
          case 25: {
            // kv
            kv = input.readDouble();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 33) {
              break;
            }
          }
          case 33: {
            // ka
            ka = input.readDouble();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 41) {
              break;
            }
          }
          case 41: {
            // dt
            dt = input.readDouble();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.ks, ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.kg, kg);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeDouble(FieldNames.kv, kv);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeDouble(FieldNames.ka, ka);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeDouble(FieldNames.dt, dt);
      }
      output.endObject();
    }

    @Override
    public ProtobufElevatorFeedforward mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3432: {
            if (input.isAtField(FieldNames.ks)) {
              if (!input.trySkipNullValue()) {
                ks = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3420: {
            if (input.isAtField(FieldNames.kg)) {
              if (!input.trySkipNullValue()) {
                kg = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3435: {
            if (input.isAtField(FieldNames.kv)) {
              if (!input.trySkipNullValue()) {
                kv = input.readDouble();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3414: {
            if (input.isAtField(FieldNames.ka)) {
              if (!input.trySkipNullValue()) {
                ka = input.readDouble();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3216: {
            if (input.isAtField(FieldNames.dt)) {
              if (!input.trySkipNullValue()) {
                dt = input.readDouble();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ProtobufElevatorFeedforward clone() {
      return new ProtobufElevatorFeedforward().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ProtobufElevatorFeedforward parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ProtobufElevatorFeedforward(), data).checkInitialized();
    }

    public static ProtobufElevatorFeedforward parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufElevatorFeedforward(), input).checkInitialized();
    }

    public static ProtobufElevatorFeedforward parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ProtobufElevatorFeedforward(), input).checkInitialized();
    }

    /**
     * @return factory for creating ProtobufElevatorFeedforward messages
     */
    public static MessageFactory<ProtobufElevatorFeedforward> getFactory() {
      return ProtobufElevatorFeedforwardFactory.INSTANCE;
    }

    /**
     * @return this type's descriptor.
     */
    public static Descriptors.Descriptor getDescriptor() {
      return Controller.wpi_proto_ProtobufElevatorFeedforward_descriptor;
    }

    private enum ProtobufElevatorFeedforwardFactory implements MessageFactory<ProtobufElevatorFeedforward> {
      INSTANCE;

      @Override
      public ProtobufElevatorFeedforward create() {
        return ProtobufElevatorFeedforward.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName ks = FieldName.forField("ks");

      static final FieldName kg = FieldName.forField("kg");

      static final FieldName kv = FieldName.forField("kv");

      static final FieldName ka = FieldName.forField("ka");

      static final FieldName dt = FieldName.forField("dt");
    }
  }

  /**
   * Protobuf type {@code ProtobufSimpleMotorFeedforward}
   */
  public static final class ProtobufSimpleMotorFeedforward extends ProtoMessage<ProtobufSimpleMotorFeedforward> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional double ks = 1;</code>
     */
    private double ks;

    /**
     * <code>optional double kv = 2;</code>
     */
    private double kv;

    /**
     * <code>optional double ka = 3;</code>
     */
    private double ka;

    /**
     * <code>optional double dt = 4;</code>
     */
    private double dt;

    private ProtobufSimpleMotorFeedforward() {
    }

    /**
     * @return a new empty instance of {@code ProtobufSimpleMotorFeedforward}
     */
    public static ProtobufSimpleMotorFeedforward newInstance() {
      return new ProtobufSimpleMotorFeedforward();
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return whether the ks field is set
     */
    public boolean hasKs() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return this
     */
    public ProtobufSimpleMotorFeedforward clearKs() {
      bitField0_ &= ~0x00000001;
      ks = 0D;
      return this;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @return the ks
     */
    public double getKs() {
      return ks;
    }

    /**
     * <code>optional double ks = 1;</code>
     * @param value the ks to set
     * @return this
     */
    public ProtobufSimpleMotorFeedforward setKs(final double value) {
      bitField0_ |= 0x00000001;
      ks = value;
      return this;
    }

    /**
     * <code>optional double kv = 2;</code>
     * @return whether the kv field is set
     */
    public boolean hasKv() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double kv = 2;</code>
     * @return this
     */
    public ProtobufSimpleMotorFeedforward clearKv() {
      bitField0_ &= ~0x00000002;
      kv = 0D;
      return this;
    }

    /**
     * <code>optional double kv = 2;</code>
     * @return the kv
     */
    public double getKv() {
      return kv;
    }

    /**
     * <code>optional double kv = 2;</code>
     * @param value the kv to set
     * @return this
     */
    public ProtobufSimpleMotorFeedforward setKv(final double value) {
      bitField0_ |= 0x00000002;
      kv = value;
      return this;
    }

    /**
     * <code>optional double ka = 3;</code>
     * @return whether the ka field is set
     */
    public boolean hasKa() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional double ka = 3;</code>
     * @return this
     */
    public ProtobufSimpleMotorFeedforward clearKa() {
      bitField0_ &= ~0x00000004;
      ka = 0D;
      return this;
    }

    /**
     * <code>optional double ka = 3;</code>
     * @return the ka
     */
    public double getKa() {
      return ka;
    }

    /**
     * <code>optional double ka = 3;</code>
     * @param value the ka to set
     * @return this
     */
    public ProtobufSimpleMotorFeedforward setKa(final double value) {
      bitField0_ |= 0x00000004;
      ka = value;
      return this;
    }

    /**
     * <code>optional double dt = 4;</code>
     * @return whether the dt field is set
     */
    public boolean hasDt() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional double dt = 4;</code>
     * @return this
     */
    public ProtobufSimpleMotorFeedforward clearDt() {
      bitField0_ &= ~0x00000008;
      dt = 0D;
      return this;
    }

    /**
     * <code>optional double dt = 4;</code>
     * @return the dt
     */
    public double getDt() {
      return dt;
    }

    /**
     * <code>optional double dt = 4;</code>
     * @param value the dt to set
     * @return this
     */
    public ProtobufSimpleMotorFeedforward setDt(final double value) {
      bitField0_ |= 0x00000008;
      dt = value;
      return this;
    }

    @Override
    public ProtobufSimpleMotorFeedforward copyFrom(final ProtobufSimpleMotorFeedforward other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        ks = other.ks;
        kv = other.kv;
        ka = other.ka;
        dt = other.dt;
      }
      return this;
    }

    @Override
    public ProtobufSimpleMotorFeedforward mergeFrom(final ProtobufSimpleMotorFeedforward other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKs()) {
        setKs(other.ks);
      }
      if (other.hasKv()) {
        setKv(other.kv);
      }
      if (other.hasKa()) {
        setKa(other.ka);
      }
      if (other.hasDt()) {
        setDt(other.dt);
      }
      return this;
    }

    @Override
    public ProtobufSimpleMotorFeedforward clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ks = 0D;
      kv = 0D;
      ka = 0D;
      dt = 0D;
      return this;
    }

    @Override
    public ProtobufSimpleMotorFeedforward clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ProtobufSimpleMotorFeedforward)) {
        return false;
      }
      ProtobufSimpleMotorFeedforward other = (ProtobufSimpleMotorFeedforward) o;
      return bitField0_ == other.bitField0_
        && (!hasKs() || ProtoUtil.isEqual(ks, other.ks))
        && (!hasKv() || ProtoUtil.isEqual(kv, other.kv))
        && (!hasKa() || ProtoUtil.isEqual(ka, other.ka))
        && (!hasDt() || ProtoUtil.isEqual(dt, other.dt));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 9);
        output.writeDoubleNoTag(ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 17);
        output.writeDoubleNoTag(kv);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 25);
        output.writeDoubleNoTag(ka);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 33);
        output.writeDoubleNoTag(dt);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 9;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ProtobufSimpleMotorFeedforward mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 9: {
            // ks
            ks = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 17) {
              break;
            }
          }
          case 17: {
            // kv
            kv = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 25) {
              break;
            }
          }
          case 25: {
            // ka
            ka = input.readDouble();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 33) {
              break;
            }
          }
          case 33: {
            // dt
            dt = input.readDouble();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.ks, ks);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.kv, kv);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeDouble(FieldNames.ka, ka);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeDouble(FieldNames.dt, dt);
      }
      output.endObject();
    }

    @Override
    public ProtobufSimpleMotorFeedforward mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3432: {
            if (input.isAtField(FieldNames.ks)) {
              if (!input.trySkipNullValue()) {
                ks = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3435: {
            if (input.isAtField(FieldNames.kv)) {
              if (!input.trySkipNullValue()) {
                kv = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3414: {
            if (input.isAtField(FieldNames.ka)) {
              if (!input.trySkipNullValue()) {
                ka = input.readDouble();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3216: {
            if (input.isAtField(FieldNames.dt)) {
              if (!input.trySkipNullValue()) {
                dt = input.readDouble();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ProtobufSimpleMotorFeedforward clone() {
      return new ProtobufSimpleMotorFeedforward().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ProtobufSimpleMotorFeedforward parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ProtobufSimpleMotorFeedforward(), data).checkInitialized();
    }

    public static ProtobufSimpleMotorFeedforward parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufSimpleMotorFeedforward(), input).checkInitialized();
    }

    public static ProtobufSimpleMotorFeedforward parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufSimpleMotorFeedforward(), input).checkInitialized();
    }

    /**
     * @return factory for creating ProtobufSimpleMotorFeedforward messages
     */
    public static MessageFactory<ProtobufSimpleMotorFeedforward> getFactory() {
      return ProtobufSimpleMotorFeedforwardFactory.INSTANCE;
    }

    /**
     * @return this type's descriptor.
     */
    public static Descriptors.Descriptor getDescriptor() {
      return Controller.wpi_proto_ProtobufSimpleMotorFeedforward_descriptor;
    }

    private enum ProtobufSimpleMotorFeedforwardFactory implements MessageFactory<ProtobufSimpleMotorFeedforward> {
      INSTANCE;

      @Override
      public ProtobufSimpleMotorFeedforward create() {
        return ProtobufSimpleMotorFeedforward.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName ks = FieldName.forField("ks");

      static final FieldName kv = FieldName.forField("kv");

      static final FieldName ka = FieldName.forField("ka");

      static final FieldName dt = FieldName.forField("dt");
    }
  }

  /**
   * Protobuf type {@code ProtobufDifferentialDriveWheelVoltages}
   */
  public static final class ProtobufDifferentialDriveWheelVoltages extends ProtoMessage<ProtobufDifferentialDriveWheelVoltages> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional double left = 1;</code>
     */
    private double left;

    /**
     * <code>optional double right = 2;</code>
     */
    private double right;

    private ProtobufDifferentialDriveWheelVoltages() {
    }

    /**
     * @return a new empty instance of {@code ProtobufDifferentialDriveWheelVoltages}
     */
    public static ProtobufDifferentialDriveWheelVoltages newInstance() {
      return new ProtobufDifferentialDriveWheelVoltages();
    }

    /**
     * <code>optional double left = 1;</code>
     * @return whether the left field is set
     */
    public boolean hasLeft() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional double left = 1;</code>
     * @return this
     */
    public ProtobufDifferentialDriveWheelVoltages clearLeft() {
      bitField0_ &= ~0x00000001;
      left = 0D;
      return this;
    }

    /**
     * <code>optional double left = 1;</code>
     * @return the left
     */
    public double getLeft() {
      return left;
    }

    /**
     * <code>optional double left = 1;</code>
     * @param value the left to set
     * @return this
     */
    public ProtobufDifferentialDriveWheelVoltages setLeft(final double value) {
      bitField0_ |= 0x00000001;
      left = value;
      return this;
    }

    /**
     * <code>optional double right = 2;</code>
     * @return whether the right field is set
     */
    public boolean hasRight() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional double right = 2;</code>
     * @return this
     */
    public ProtobufDifferentialDriveWheelVoltages clearRight() {
      bitField0_ &= ~0x00000002;
      right = 0D;
      return this;
    }

    /**
     * <code>optional double right = 2;</code>
     * @return the right
     */
    public double getRight() {
      return right;
    }

    /**
     * <code>optional double right = 2;</code>
     * @param value the right to set
     * @return this
     */
    public ProtobufDifferentialDriveWheelVoltages setRight(final double value) {
      bitField0_ |= 0x00000002;
      right = value;
      return this;
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages copyFrom(
        final ProtobufDifferentialDriveWheelVoltages other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        left = other.left;
        right = other.right;
      }
      return this;
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages mergeFrom(
        final ProtobufDifferentialDriveWheelVoltages other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLeft()) {
        setLeft(other.left);
      }
      if (other.hasRight()) {
        setRight(other.right);
      }
      return this;
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      left = 0D;
      right = 0D;
      return this;
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ProtobufDifferentialDriveWheelVoltages)) {
        return false;
      }
      ProtobufDifferentialDriveWheelVoltages other = (ProtobufDifferentialDriveWheelVoltages) o;
      return bitField0_ == other.bitField0_
        && (!hasLeft() || ProtoUtil.isEqual(left, other.left))
        && (!hasRight() || ProtoUtil.isEqual(right, other.right));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 9);
        output.writeDoubleNoTag(left);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 17);
        output.writeDoubleNoTag(right);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 9;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 9;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ProtobufDifferentialDriveWheelVoltages mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 9: {
            // left
            left = input.readDouble();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 17) {
              break;
            }
          }
          case 17: {
            // right
            right = input.readDouble();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeDouble(FieldNames.left, left);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeDouble(FieldNames.right, right);
      }
      output.endObject();
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3317767: {
            if (input.isAtField(FieldNames.left)) {
              if (!input.trySkipNullValue()) {
                left = input.readDouble();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 108511772: {
            if (input.isAtField(FieldNames.right)) {
              if (!input.trySkipNullValue()) {
                right = input.readDouble();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ProtobufDifferentialDriveWheelVoltages clone() {
      return new ProtobufDifferentialDriveWheelVoltages().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ProtobufDifferentialDriveWheelVoltages parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveWheelVoltages(), data).checkInitialized();
    }

    public static ProtobufDifferentialDriveWheelVoltages parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveWheelVoltages(), input).checkInitialized();
    }

    public static ProtobufDifferentialDriveWheelVoltages parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ProtobufDifferentialDriveWheelVoltages(), input).checkInitialized();
    }

    /**
     * @return factory for creating ProtobufDifferentialDriveWheelVoltages messages
     */
    public static MessageFactory<ProtobufDifferentialDriveWheelVoltages> getFactory() {
      return ProtobufDifferentialDriveWheelVoltagesFactory.INSTANCE;
    }

    /**
     * @return this type's descriptor.
     */
    public static Descriptors.Descriptor getDescriptor() {
      return Controller.wpi_proto_ProtobufDifferentialDriveWheelVoltages_descriptor;
    }

    private enum ProtobufDifferentialDriveWheelVoltagesFactory implements MessageFactory<ProtobufDifferentialDriveWheelVoltages> {
      INSTANCE;

      @Override
      public ProtobufDifferentialDriveWheelVoltages create() {
        return ProtobufDifferentialDriveWheelVoltages.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName left = FieldName.forField("left");

      static final FieldName right = FieldName.forField("right");
    }
  }
}

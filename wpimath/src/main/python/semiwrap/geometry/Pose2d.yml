extra_includes:
- rpy/geometryToString.h
- wpystruct.h

functions:
  to_json:
    ignore: true
  from_json:
    ignore: true
classes:
  frc::Pose2d:
    force_type_casters:
    - units::foot_t
    - units::meter_t
    - units::radian_t
    methods:
      Pose2d:
        overloads:
          '':
          Translation2d, Rotation2d:
          units::meter_t, units::meter_t, Rotation2d:
          const Eigen::Matrix3d&:
            rename: fromMatrix
            keepalive: []
      Translation:
      Rotation:
      RotateBy:
      TransformBy:
      RelativeTo:
      Exp:
      Log:
      ToMatrix:
      Nearest:
        overloads:
          std::span<const Pose2d> [const]:
          std::initializer_list<Pose2d> [const]:
            ignore: true
      X:
      Y:
      operator+:
      operator-:
      operator==:
      operator*:
      operator/:
      RotateAround:

inline_code: |
  cls_Pose2d
    .def_static("fromFeet", [](units::foot_t x, units::foot_t y, Rotation2d r) {
      return std::make_unique<Pose2d>(x, y, r);
    }, py::arg("x"), py::arg("y"), py::arg("r"))
    .def_static("fromFeet", [](units::foot_t x, units::foot_t y, units::radian_t angle) {
      return std::make_unique<Pose2d>(x, y, Rotation2d(angle));
    }, py::arg("x"), py::arg("y"), py::arg("angle"))
    .def(py::init([](units::meter_t x, units::meter_t y, units::radian_t angle) {
      return std::make_unique<Pose2d>(x, y, angle);
    }), py::arg("x"), py::arg("y"), py::arg("angle"))
    .def_property_readonly("x", &Pose2d::X)
    .def_property_readonly("y", &Pose2d::Y)
    .def_property_readonly("x_feet", [](Pose2d * self) -> units::foot_t {
      return self->X();
    })
    .def_property_readonly("y_feet", [](Pose2d * self) -> units::foot_t {
      return self->Y();
    })
    .def("__repr__", py::overload_cast<const Pose2d&>(&rpy::toString));

  SetupWPyStruct<frc::Pose2d>(cls_Pose2d);

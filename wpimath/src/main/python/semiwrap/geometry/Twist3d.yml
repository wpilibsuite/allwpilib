extra_includes:
- wpystruct.h

classes:
  wpi::math::Twist3d:
    force_no_default_constructor: true
    attributes:
      dx:
      dy:
      dz:
      rx:
      ry:
      rz:
    methods:
      operator==:
      operator*:

inline_code: |-
  cls_Twist3d
    .def(
      py::init<wpi::units::meter_t, wpi::units::meter_t, wpi::units::meter_t,
               wpi::units::radian_t, wpi::units::radian_t, wpi::units::radian_t>(),
      py::arg("dx") = 0, py::arg("dy") = 0, py::arg("dz") = 0,
      py::arg("rx") = 0, py::arg("ry") = 0, py::arg("rz") = 0)
    .def_static("fromFeet", [](
      wpi::units::foot_t dx, wpi::units::foot_t dy, wpi::units::foot_t dz,
      wpi::units::radian_t rx, wpi::units::radian_t ry, wpi::units::radian_t rz){
      return Twist3d{dx, dy, dz, rx, ry, rz};
    },
      py::arg("dx") = 0, py::arg("dy") = 0, py::arg("dz") = 0,
      py::arg("rx") = 0, py::arg("ry") = 0, py::arg("rz") = 0)
    .def_property("dx_feet", 
      [](Twist3d * self) -> wpi::units::foot_t {
        return self->dx;
      },
      [](Twist3d * self, wpi::units::foot_t dx) {
        self->dx = dx;
      }
    )
    .def_property("dy_feet", 
      [](Twist3d * self) -> wpi::units::foot_t {
        return self->dy;
      },
      [](Twist3d * self, wpi::units::foot_t dy) {
        self->dy = dy;
      }
    )
    .def_property("dz_feet", 
      [](Twist3d * self) -> wpi::units::foot_t {
        return self->dz;
      },
      [](Twist3d * self, wpi::units::foot_t dz) {
        self->dz = dz;
      }
    )
    .def_property("rx_degrees", 
      [](Twist3d * self) -> wpi::units::degree_t {
        return self->rx;
      },
      [](Twist3d * self, wpi::units::degree_t rx) {
        self->rx = rx;
      }
    )
    .def_property("ry_degrees", 
      [](Twist3d * self) -> wpi::units::degree_t {
        return self->ry;
      },
      [](Twist3d * self, wpi::units::degree_t ry) {
        self->ry = ry;
      }
    )
    .def_property("rz_degrees", 
      [](Twist3d * self) -> wpi::units::degree_t {
        return self->rz;
      },
      [](Twist3d * self, wpi::units::degree_t rz) {
        self->rz = rz;
      }
    )
    .def("__repr__", [](const Twist3d &tw) -> std::string {
      return "Twist3d(dx=" + std::to_string(tw.dx()) + ", "
                     "dy=" + std::to_string(tw.dy()) + ", "
                     "dz=" + std::to_string(tw.dz()) + ", "
                     "rx=" + std::to_string(tw.rx()) + ", "
                     "ry=" + std::to_string(tw.ry()) + ", "
                     "rz=" + std::to_string(tw.rz()) + ")";
    })
  ;

  SetupWPyStruct<wpi::math::Twist3d>(cls_Twist3d);

extra_includes:
- frc/geometry/Pose2d.h
- rpy/geometryToString.h
- wpystruct.h

classes:
  frc::Transform2d:
    force_type_casters:
    - units::foot_t
    - units::meter_t
    - units::radian_t
    methods:
      Transform2d:
        overloads:
          const Pose2d&, const Pose2d&:
            keepalive: []
          Translation2d, Rotation2d:
          units::meter_t, units::meter_t, Rotation2d:
          const Eigen::Matrix3d&:
            rename: fromMatrix
            keepalive: []
          '':
      Translation:
      X:
      Y:
      ToMatrix:
      Rotation:
      Inverse:
      operator*:
      operator/:
      operator==:
      operator+:

inline_code: |
  cls_Transform2d
    .def_static("fromFeet", [](units::foot_t x, units::foot_t y, units::radian_t angle){
      return std::make_unique<Transform2d>(Translation2d(x, y), Rotation2d(angle));
    }, py::arg("x"), py::arg("y"), py::arg("angle"))
    .def(py::init([](units::meter_t x, units::meter_t y, units::radian_t angle) {
      return std::make_unique<Transform2d>(Translation2d(x, y), Rotation2d(angle));
    }), py::arg("x"), py::arg("y"), py::arg("angle"))
    .def_property_readonly("x", &Transform2d::X)
    .def_property_readonly("y", &Transform2d::Y)
    .def_property_readonly("x_feet", [](Transform2d * self) -> units::foot_t {
      return self->X();
    })
    .def_property_readonly("y_feet", [](Transform2d * self) -> units::foot_t {
      return self->Y();
    })
    .def("__repr__", py::overload_cast<const Transform2d&>(&rpy::toString));
  ;

  SetupWPyStruct<frc::Transform2d>(cls_Transform2d);

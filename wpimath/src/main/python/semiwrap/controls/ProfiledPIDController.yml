defaults:
  subpackage: controller

functions:
  IncrementAndGetProfiledPIDControllerInstances:
    ignore: true
classes:
  frc::ProfiledPIDController:
    force_type_casters:
    - units::radians_per_second
    template_params:
    - Distance
    ignored_bases:
    - wpi::SendableHelper<ProfiledPIDController<Distance>>
    typealias:
    - typename frc::ProfiledPIDController<Distance>::Velocity
    - typename frc::ProfiledPIDController<Distance>::Velocity_t
    methods:
      ProfiledPIDController:
        param_override:
          constraints:
            x_type: typename TrapezoidProfile<Distance>::Constraints
          period:
            default: 0.020_s
      SetPID:
      SetP:
      SetI:
      SetD:
      SetIZone:
      GetP:
      GetI:
      GetD:
      GetIZone:
      GetPeriod:
      GetPositionTolerance:
      GetVelocityTolerance:
      GetAccumulatedError:
      SetGoal:
        overloads:
          State:
          Distance_t:
      GetGoal:
      AtGoal:
      SetConstraints:
      GetConstraints:
      GetSetpoint:
      AtSetpoint:
      EnableContinuousInput:
      DisableContinuousInput:
      SetIntegratorRange:
      SetTolerance:
      GetPositionError:
      GetVelocityError:
      Calculate:
        overloads:
          Distance_t:
          Distance_t, State:
          Distance_t, Distance_t:
          Distance_t, Distance_t, typename frc::TrapezoidProfile<Distance>::Constraints:
            param_override:
              constraints:
                x_type: typename TrapezoidProfile<Distance>::Constraints
      Reset:
        overloads:
          const State&:
          Distance_t, Velocity_t:
          Distance_t:
      InitSendable:

templates:
  ProfiledPIDController:
    qualname: frc::ProfiledPIDController
    params:
    - units::dimensionless::scalar

  # needed for HolonomicDriveController
  ProfiledPIDControllerRadians:
    qualname: frc::ProfiledPIDController
    params:
    - units::radian

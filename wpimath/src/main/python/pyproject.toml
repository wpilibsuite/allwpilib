[build-system]
build-backend = "hatchling.build"
requires = [
    "semiwrap~=0.1.7",
    "hatch-meson~=0.1.0b2",
    "hatch-robotpy~=0.2.1",
    "hatchling",
    "robotpy-native-wpimath==2027.0.0a2",
    "robotpy-wpiutil==2027.0.0a2",
    # "numpy", # broken in raspbian CI
]

[project]
name = "robotpy-wpimath"
version = "2027.0.0a2"
description = "Binary wrapper for FRC WPIMath library"
authors = [
    {name = "RobotPy Development Team", email = "robotpy@googlegroups.com"},
]
license = "BSD-3-Clause"
dependencies = [
    "robotpy-native-wpimath==2027.0.0a2",
    "robotpy-wpiutil==2027.0.0a2",
]

[project.urls]
"Source code" = "https://github.com/robotpy/mostrobotpy"


[tool.hatch.build.hooks.robotpy]
version_file = "wpimath/version.py"

[tool.hatch.build.hooks.semiwrap]

[tool.hatch.build.hooks.meson]

[tool.hatch.build.targets.wheel]
packages = ["wpimath"]


[tool.semiwrap]
update_init = [
    "wpimath",
    "wpimath.controller wpimath._controls._controls.controller",
    "wpimath.estimator wpimath._controls._controls.estimator",
    "wpimath.filter",
    "wpimath.geometry",
    "wpimath.optimization wpimath._controls._controls.optimization",
    "wpimath.path wpimath._controls._controls.path",
    "wpimath.spline",
    "wpimath.system wpimath._controls._controls.system",
    "wpimath.trajectory wpimath._controls._controls.trajectory",
    "wpimath.trajectory.constraint wpimath._controls._controls.constraint",
]

scan_headers_ignore = [
    
    "frc/ct_matrix.h",
    "frc/DARE.h",
    "frc/EigenCore.h",
    "frc/StateSpaceUtil.h",

    "frc/fmt/Eigen.h",

    "frc/estimator/AngleStatistics.h",
    "frc/estimator/KalmanFilterLatencyCompensator.h",
    "frc/estimator/MerweScaledSigmaPoints.h",
    "frc/estimator/MerweUKF.h",
    "frc/estimator/S3SigmaPoints.h",
    "frc/estimator/S3UKF.h",
    "frc/estimator/SigmaPoints.h",
    "frc/estimator/SteadyStateKalmanFilter.h",
    "frc/estimator/UnscentedKalmanFilter.h",
    "frc/estimator/UnscentedTransform.h",

    "frc/system/Discretization.h",
    "frc/system/NumericalIntegration.h",
    "frc/system/NumericalJacobian.h",

    "frc/proto/*",
    "frc/*/proto/*",
    
    "frc/struct/*",
    "frc/*/struct/*",
    
    "[eE]igen/*",

    "gcem.hpp",
    "gcem_incl/*",

    "gch/*",
    "sleipnir/*",
    "type_casters/*",
    "unsupported/*",
    "units/*",
    "wpimath/protobuf/*",

    "wpimath/MathShared.h",

    "rpy/geometryToString.h",
    "PyTrajectoryConstraint.h",
    "_units_base_type_caster.h",
]

[tool.semiwrap.export_type_casters.wpimath-casters]
pypackage = "wpimath"
requires = ["wpiutil"]
includedir = ["wpimath/_impl/src", "wpimath/_impl/src/type_casters"]


[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_acceleration_type_caster.h"
types = [
    "units::feet_per_second_squared_t",
    "units::meters_per_second_squared_t",
    "units::standard_gravity_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_acceleration_type_caster.h"
types = [
    "units::feet_per_second_squared",
    "units::feet_per_second_squared",
    "units::meters_per_second_squared",
    "units::meters_per_second_squared",
    "units::standard_gravity",
    "units::standard_gravity",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angle_type_caster.h"
types = [
    "units::arcminute_t",
    "units::arcsecond_t",
    "units::degree_t",
    "units::gradian_t",
    "units::kiloradian_t",
    "units::microradian_t",
    "units::milliarcsecond_t",
    "units::milliradian_t",
    "units::nanoradian_t",
    "units::radian_t",
    "units::turn_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angle_type_caster.h"
types = [
    "units::arcminute",
    "units::arcminutes",
    "units::arcsecond",
    "units::arcseconds",
    "units::degree",
    "units::degrees",
    "units::gradian",
    "units::gradians",
    "units::kiloradian",
    "units::kiloradians",
    "units::microradian",
    "units::microradians",
    "units::milliarcsecond",
    "units::milliarcseconds",
    "units::milliradian",
    "units::milliradians",
    "units::nanoradian",
    "units::nanoradians",
    "units::radian",
    "units::radians",
    "units::turn",
    "units::turns",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angular_acceleration_type_caster.h"
types = [
    "units::radians_per_second_squared_t",
    "units::degrees_per_second_squared_t",
    "units::turns_per_second_squared_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angular_acceleration_type_caster.h"
types = [
    "units::radians_per_second_squared",
    "units::degrees_per_second_squared",
    "units::turns_per_second_squared",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angular_velocity_type_caster.h"
types = [
    "units::degrees_per_second_t",
    "units::milliarcseconds_per_year_t",
    "units::radians_per_second_t",
    "units::turns_per_second_t",
    "units::revolutions_per_minute_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_angular_velocity_type_caster.h"
types = [
    "units::degrees_per_second",
    "units::milliarcseconds_per_year",
    "units::radians_per_second",
    "units::turns_per_second",
    "units::revolutions_per_minute",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_area_type_caster.h"
types = [
    "units::acre_t",
    "units::hectare_t",
    "units::square_foot_t",
    "units::square_inch_t",
    "units::square_kilometer_t",
    "units::square_meter_t",
    "units::square_mile_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_area_type_caster.h"
types = [
    "units::acre",
    "units::acres",
    "units::hectare",
    "units::hectares",
    "units::square_feet",
    "units::square_foot",
    "units::square_inch",
    "units::square_inches",
    "units::square_kilometer",
    "units::square_kilometers",
    "units::square_meter",
    "units::square_meters",
    "units::square_mile",
    "units::square_miles",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_capacitance_type_caster.h"
types = [
    "units::farad_t",
    "units::kilofarad_t",
    "units::microfarad_t",
    "units::millifarad_t",
    "units::nanofarad_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_capacitance_type_caster.h"
types = [
    "units::farad",
    "units::farads",
    "units::kilofarad",
    "units::kilofarads",
    "units::microfarad",
    "units::microfarads",
    "units::millifarad",
    "units::millifarads",
    "units::nanofarad",
    "units::nanofarads",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_charge_type_caster.h"
types = [
    "units::ampere_hour_t",
    "units::coulomb_t",
    "units::kiloampere_hour_t",
    "units::kilocoulomb_t",
    "units::microampere_hour_t",
    "units::microcoulomb_t",
    "units::milliampere_hour_t",
    "units::millicoulomb_t",
    "units::nanoampere_hour_t",
    "units::nanocoulomb_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_charge_type_caster.h"
types = [
    "units::ampere_hour",
    "units::ampere_hours",
    "units::coulomb",
    "units::coulombs",
    "units::kiloampere_hour",
    "units::kiloampere_hours",
    "units::kilocoulomb",
    "units::kilocoulombs",
    "units::microampere_hour",
    "units::microampere_hours",
    "units::microcoulomb",
    "units::microcoulombs",
    "units::milliampere_hour",
    "units::milliampere_hours",
    "units::millicoulomb",
    "units::millicoulombs",
    "units::nanoampere_hour",
    "units::nanoampere_hours",
    "units::nanocoulomb",
    "units::nanocoulombs",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_concentration_type_caster.h"
types = [
    "units::percent_t",
    "units::ppb_t",
    "units::ppm_t",
    "units::ppt_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_concentration_type_caster.h"
types = [
    "units::parts_per_billion",
    "units::parts_per_million",
    "units::parts_per_trillion",
    "units::percent",
    "units::percent",
    "units::ppb",
    "units::ppm",
    "units::ppt",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_conductance_type_caster.h"
types = [
    "units::kilosiemens_t",
    "units::microsiemens_t",
    "units::millisiemens_t",
    "units::nanosiemens_t",
    "units::siemens_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_conductance_type_caster.h"
types = [
    "units::kilosiemens",
    "units::kilosiemens",
    "units::microsiemens",
    "units::microsiemens",
    "units::millisiemens",
    "units::millisiemens",
    "units::nanosiemens",
    "units::nanosiemens",
    "units::siemens",
    "units::siemens",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_current_type_caster.h"
types = [
    "units::ampere_t",
    "units::kiloampere_t",
    "units::microampere_t",
    "units::milliampere_t",
    "units::nanoampere_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_current_type_caster.h"
types = [
    "units::ampere",
    "units::amperes",
    "units::kiloampere",
    "units::kiloamperes",
    "units::microampere",
    "units::microamperes",
    "units::milliampere",
    "units::milliamperes",
    "units::nanoampere",
    "units::nanoamperes",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_data_type_caster.h"
types = [
    "units::exabit_t",
    "units::exabyte_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_data_type_caster.h"
types = [
    "units::exabit",
    "units::exabits",
    "units::exabyte",
    "units::exabytes",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_data_transfer_rate_type_caster.h"
types = [
    "units::exabits_per_second_t",
    "units::exabytes_per_second_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_data_transfer_rate_type_caster.h"
types = [
    "units::exabits_per_second",
    "units::exabits_per_second",
    "units::exabytes_per_second",
    "units::exabytes_per_second",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_density_type_caster.h"
types = [
    "units::grams_per_milliliter_t",
    "units::kilograms_per_cubic_meter_t",
    "units::kilograms_per_liter_t",
    "units::ounces_per_cubic_foot_t",
    "units::ounces_per_cubic_inch_t",
    "units::ounces_per_gallon_t",
    "units::pounds_per_cubic_foot_t",
    "units::pounds_per_cubic_inch_t",
    "units::pounds_per_gallon_t",
    "units::slugs_per_cubic_foot_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_density_type_caster.h"
types = [
    "units::grams_per_milliliter",
    "units::grams_per_milliliter",
    "units::kilograms_per_cubic_meter",
    "units::kilograms_per_cubic_meter",
    "units::kilograms_per_liter",
    "units::kilograms_per_liter",
    "units::ounces_per_cubic_foot",
    "units::ounces_per_cubic_foot",
    "units::ounces_per_cubic_inch",
    "units::ounces_per_cubic_inch",
    "units::ounces_per_gallon",
    "units::ounces_per_gallon",
    "units::pounds_per_cubic_foot",
    "units::pounds_per_cubic_foot",
    "units::pounds_per_cubic_inch",
    "units::pounds_per_cubic_inch",
    "units::pounds_per_gallon",
    "units::pounds_per_gallon",
    "units::slugs_per_cubic_foot",
    "units::slugs_per_cubic_foot",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_energy_type_caster.h"
types = [
    "units::british_thermal_unit_59_t",
    "units::british_thermal_unit_iso_t",
    "units::british_thermal_unit_t",
    "units::calorie_t",
    "units::foot_pound_t",
    "units::joule_t",
    "units::kilocalorie_t",
    "units::kilojoule_t",
    "units::kilowatt_hour_t",
    "units::microcalorie_t",
    "units::microjoule_t",
    "units::millicalorie_t",
    "units::millijoule_t",
    "units::nanocalorie_t",
    "units::nanojoule_t",
    "units::therm_t",
    "units::watt_hour_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_energy_type_caster.h"
types = [
    "units::british_thermal_unit",
    "units::british_thermal_unit_59",
    "units::british_thermal_unit_iso",
    "units::british_thermal_units",
    "units::british_thermal_units_59",
    "units::british_thermal_units_iso",
    "units::calorie",
    "units::calories",
    "units::foot_pound",
    "units::foot_pounds",
    "units::joule",
    "units::joules",
    "units::kilocalorie",
    "units::kilocalories",
    "units::kilojoule",
    "units::kilojoules",
    "units::kilowatt_hour",
    "units::kilowatt_hours",
    "units::microcalorie",
    "units::microcalories",
    "units::microjoule",
    "units::microjoules",
    "units::millicalorie",
    "units::millicalories",
    "units::millijoule",
    "units::millijoules",
    "units::nanocalorie",
    "units::nanocalories",
    "units::nanojoule",
    "units::nanojoules",
    "units::therm",
    "units::therms",
    "units::watt_hour",
    "units::watt_hours",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_force_type_caster.h"
types = [
    "units::dyne_t",
    "units::kilonewton_t",
    "units::kilopond_t",
    "units::micronewton_t",
    "units::millinewton_t",
    "units::nanonewton_t",
    "units::newton_t",
    "units::pound_t",
    "units::poundal_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_force_type_caster.h"
types = [
    "units::dyne",
    "units::dynes",
    "units::kilonewton",
    "units::kilonewtons",
    "units::kilopond",
    "units::kiloponds",
    "units::micronewton",
    "units::micronewtons",
    "units::millinewton",
    "units::millinewtons",
    "units::nanonewton",
    "units::nanonewtons",
    "units::newton",
    "units::newtons",
    "units::pound",
    "units::poundal",
    "units::poundals",
    "units::pounds",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_frequency_type_caster.h"
types = [
    "units::hertz_t",
    "units::kilohertz_t",
    "units::microhertz_t",
    "units::millihertz_t",
    "units::nanohertz_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_frequency_type_caster.h"
types = [
    "units::hertz",
    "units::hertz",
    "units::kilohertz",
    "units::kilohertz",
    "units::microhertz",
    "units::microhertz",
    "units::millihertz",
    "units::millihertz",
    "units::nanohertz",
    "units::nanohertz",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_illuminance_type_caster.h"
types = [
    "units::footcandle_t",
    "units::kilolux_t",
    "units::lumens_per_square_inch_t",
    "units::lux_t",
    "units::microlux_t",
    "units::millilux_t",
    "units::nanolux_t",
    "units::phot_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_illuminance_type_caster.h"
types = [
    "units::footcandle",
    "units::footcandles",
    "units::kilolux",
    "units::kiloluxes",
    "units::lumens_per_square_inch",
    "units::lumens_per_square_inch",
    "units::lux",
    "units::luxes",
    "units::microlux",
    "units::microluxes",
    "units::millilux",
    "units::milliluxes",
    "units::nanolux",
    "units::nanoluxes",
    "units::phot",
    "units::phots",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_impedance_type_caster.h"
types = [
    "units::kiloohm_t",
    "units::microohm_t",
    "units::milliohm_t",
    "units::nanoohm_t",
    "units::ohm_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_impedance_type_caster.h"
types = [
    "units::kiloohm",
    "units::kiloohms",
    "units::microohm",
    "units::microohms",
    "units::milliohm",
    "units::milliohms",
    "units::nanoohm",
    "units::nanoohms",
    "units::ohm",
    "units::ohms",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_inductance_type_caster.h"
types = [
    "units::henry_t",
    "units::kilohenry_t",
    "units::microhenry_t",
    "units::millihenry_t",
    "units::nanohenry_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_inductance_type_caster.h"
types = [
    "units::henries",
    "units::henry",
    "units::kilohenries",
    "units::kilohenry",
    "units::microhenries",
    "units::microhenry",
    "units::millihenries",
    "units::millihenry",
    "units::nanohenries",
    "units::nanohenry",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_length_type_caster.h"
types = [
    "units::angstrom_t",
    "units::astronicalUnit_t",
    "units::centimeter_t",
    "units::chain_t",
    "units::cubit_t",
    "units::fathom_t",
    "units::foot_t",
    "units::furlong_t",
    "units::hand_t",
    "units::inch_t",
    "units::kilometer_t",
    "units::league_t",
    "units::lightyear_t",
    "units::meter_t",
    "units::micrometer_t",
    "units::mil_t",
    "units::mile_t",
    "units::millimeter_t",
    "units::nanometer_t",
    "units::nauticalLeague_t",
    "units::nauticalMile_t",
    "units::parsec_t",
    "units::yard_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_length_type_caster.h"
types = [
    "units::angstrom",
    "units::angstroms",
    "units::astronicalUnit",
    "units::astronicalUnits",
    "units::chain",
    "units::chains",
    "units::cubit",
    "units::cubits",
    "units::fathom",
    "units::fathoms",
    "units::feet",
    "units::foot",
    "units::furlong",
    "units::furlongs",
    "units::hand",
    "units::hands",
    "units::inch",
    "units::inches",
    "units::kilometer",
    "units::kilometers",
    "units::league",
    "units::leagues",
    "units::lightyear",
    "units::lightyears",
    "units::meter",
    "units::meters",
    "units::micrometer",
    "units::micrometers",
    "units::mil",
    "units::mile",
    "units::miles",
    "units::millimeter",
    "units::millimeters",
    "units::mils",
    "units::nanometer",
    "units::nanometers",
    "units::nauticalLeague",
    "units::nauticalLeagues",
    "units::nauticalMile",
    "units::nauticalMiles",
    "units::parsec",
    "units::parsecs",
    "units::yard",
    "units::yards",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_luminous_flux_type_caster.h"
types = [
    "units::kilolumen_t",
    "units::lumen_t",
    "units::microlumen_t",
    "units::millilumen_t",
    "units::nanolumen_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_luminous_flux_type_caster.h"
types = [
    "units::kilolumen",
    "units::kilolumens",
    "units::lumen",
    "units::lumens",
    "units::microlumen",
    "units::microlumens",
    "units::millilumen",
    "units::millilumens",
    "units::nanolumen",
    "units::nanolumens",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_luminous_intensity_type_caster.h"
types = [
    "units::candela_t",
    "units::kilocandela_t",
    "units::microcandela_t",
    "units::millicandela_t",
    "units::nanocandela_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_luminous_intensity_type_caster.h"
types = [
    "units::candela",
    "units::candelas",
    "units::kilocandela",
    "units::kilocandelas",
    "units::microcandela",
    "units::microcandelas",
    "units::millicandela",
    "units::millicandelas",
    "units::nanocandela",
    "units::nanocandelas",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_magnetic_field_strength_type_caster.h"
types = [
    "units::gauss_t",
    "units::kilotesla_t",
    "units::microtesla_t",
    "units::millitesla_t",
    "units::nanotesla_t",
    "units::tesla_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_magnetic_field_strength_type_caster.h"
types = [
    "units::gauss",
    "units::gauss",
    "units::kilotesla",
    "units::kiloteslas",
    "units::microtesla",
    "units::microteslas",
    "units::millitesla",
    "units::milliteslas",
    "units::nanotesla",
    "units::nanoteslas",
    "units::tesla",
    "units::teslas",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_magnetic_flux_type_caster.h"
types = [
    "units::kiloweber_t",
    "units::maxwell_t",
    "units::microweber_t",
    "units::milliweber_t",
    "units::nanoweber_t",
    "units::weber_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_magnetic_flux_type_caster.h"
types = [
    "units::kiloweber",
    "units::kilowebers",
    "units::maxwell",
    "units::maxwells",
    "units::microweber",
    "units::microwebers",
    "units::milliweber",
    "units::milliwebers",
    "units::nanoweber",
    "units::nanowebers",
    "units::weber",
    "units::webers",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_mass_type_caster.h"
types = [
    "units::carat_t",
    "units::gram_t",
    "units::kilogram_t",
    "units::long_ton_t",
    "units::metric_ton_t",
    "units::microgram_t",
    "units::milligram_t",
    "units::nanogram_t",
    "units::ounce_t",
    "units::pound_t",
    "units::short_ton_t",
    "units::slug_t",
    "units::stone_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_mass_type_caster.h"
types = [
    "units::carat",
    "units::carats",
    "units::gram",
    "units::grams",
    "units::kilogram",
    "units::kilograms",
    "units::long_ton",
    "units::long_tons",
    "units::metric_ton",
    "units::metric_tons",
    "units::microgram",
    "units::micrograms",
    "units::milligram",
    "units::milligrams",
    "units::nanogram",
    "units::nanograms",
    "units::ounce",
    "units::ounces",
    "units::pound",
    "units::pounds",
    "units::short_ton",
    "units::short_tons",
    "units::slug",
    "units::slugs",
    "units::stone",
    "units::stone",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_moment_of_inertia_type_caster.h"
types = [
    "units::kilogram_square_meter_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_moment_of_inertia_type_caster.h"
types = [
    "units::kilogram_square_meter",
    "units::kilogram_square_meters",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_power_type_caster.h"
types = [
    "units::horsepower_t",
    "units::kilowatt_t",
    "units::microwatt_t",
    "units::milliwatt_t",
    "units::nanowatt_t",
    "units::watt_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_power_type_caster.h"
types = [
    "units::horsepower",
    "units::horsepower",
    "units::kilowatt",
    "units::kilowatts",
    "units::microwatt",
    "units::microwatts",
    "units::milliwatt",
    "units::milliwatts",
    "units::nanowatt",
    "units::nanowatts",
    "units::watt",
    "units::watts",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_pressure_type_caster.h"
types = [
    "units::atmosphere_t",
    "units::bar_t",
    "units::kilopascal_t",
    "units::mbar_t",
    "units::micropascal_t",
    "units::millipascal_t",
    "units::nanopascal_t",
    "units::pascal_t",
    "units::pounds_per_square_inch_t",
    "units::torr_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_pressure_type_caster.h"
types = [
    "units::atmosphere",
    "units::atmospheres",
    "units::bar",
    "units::bars",
    "units::kilopascal",
    "units::kilopascals",
    "units::mbar",
    "units::mbars",
    "units::micropascal",
    "units::micropascals",
    "units::millipascal",
    "units::millipascals",
    "units::nanopascal",
    "units::nanopascals",
    "units::pascal",
    "units::pascals",
    "units::pounds_per_square_inch",
    "units::pounds_per_square_inch",
    "units::torr",
    "units::torrs",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_radiation_type_caster.h"
types = [
    "units::becquerel_t",
    "units::curie_t",
    "units::gray_t",
    "units::kilobecquerel_t",
    "units::kilogray_t",
    "units::kilosievert_t",
    "units::microbecquerel_t",
    "units::microgray_t",
    "units::microsievert_t",
    "units::millibecquerel_t",
    "units::milligray_t",
    "units::millisievert_t",
    "units::nanobecquerel_t",
    "units::nanogray_t",
    "units::nanosievert_t",
    "units::rad_t",
    "units::rutherford_t",
    "units::sievert_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_radiation_type_caster.h"
types = [
    "units::becquerel",
    "units::becquerels",
    "units::curie",
    "units::curies",
    "units::gray",
    "units::grays",
    "units::kilobecquerel",
    "units::kilobecquerels",
    "units::kilogray",
    "units::kilograys",
    "units::kilosievert",
    "units::kilosieverts",
    "units::microbecquerel",
    "units::microbecquerels",
    "units::microgray",
    "units::micrograys",
    "units::microsievert",
    "units::microsieverts",
    "units::millibecquerel",
    "units::millibecquerels",
    "units::milligray",
    "units::milligrays",
    "units::millisievert",
    "units::millisieverts",
    "units::nanobecquerel",
    "units::nanobecquerels",
    "units::nanogray",
    "units::nanograys",
    "units::nanosievert",
    "units::nanosieverts",
    "units::rad",
    "units::rads",
    "units::rutherford",
    "units::rutherfords",
    "units::sievert",
    "units::sieverts",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_solid_angle_type_caster.h"
types = [
    "units::degree_squared_t",
    "units::kilosteradian_t",
    "units::microsteradian_t",
    "units::millisteradian_t",
    "units::nanosteradian_t",
    "units::spat_t",
    "units::steradian_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_solid_angle_type_caster.h"
types = [
    "units::degree_squared",
    "units::degrees_squared",
    "units::kilosteradian",
    "units::kilosteradians",
    "units::microsteradian",
    "units::microsteradians",
    "units::millisteradian",
    "units::millisteradians",
    "units::nanosteradian",
    "units::nanosteradians",
    "units::spat",
    "units::spats",
    "units::steradian",
    "units::steradians",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_substance_type_caster.h"
types = [
    "units::mole_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_substance_type_caster.h"
types = [
    "units::mole",
    "units::moles",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_temperature_type_caster.h"
types = [
    "units::celsius_t",
    "units::fahrenheit_t",
    "units::kelvin_t",
    "units::rankine_t",
    "units::reaumur_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_temperature_type_caster.h"
types = [
    "units::celsius",
    "units::celsius",
    "units::fahrenheit",
    "units::fahrenheit",
    "units::kelvin",
    "units::kelvin",
    "units::rankine",
    "units::rankine",
    "units::reaumur",
    "units::reaumur",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_time_type_caster.h"
types = [
    "units::day_t",
    "units::gregorian_year_t",
    "units::hour_t",
    "units::julian_year_t",
    "units::kilosecond_t",
    "units::microsecond_t",
    "units::millisecond_t",
    "units::minute_t",
    "units::nanosecond_t",
    "units::second_t",
    "units::week_t",
    "units::year_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_time_type_caster.h"
types = [
    "units::day",
    "units::days",
    "units::gregorian_year",
    "units::gregorian_years",
    "units::hour",
    "units::hours",
    "units::julian_year",
    "units::julian_years",
    "units::kilosecond",
    "units::kiloseconds",
    "units::microsecond",
    "units::microseconds",
    "units::millisecond",
    "units::milliseconds",
    "units::minute",
    "units::minutes",
    "units::nanosecond",
    "units::nanoseconds",
    "units::second",
    "units::seconds",
    "units::week",
    "units::weeks",
    "units::year",
    "units::years",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_torque_type_caster.h"
types = [
    "units::foot_pound_t",
    "units::foot_poundal_t",
    "units::inch_pound_t",
    "units::meter_kilogram_t",
    "units::newton_meter_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_torque_type_caster.h"
types = [
    "units::foot_pound",
    "units::foot_poundal",
    "units::foot_poundals",
    "units::foot_pounds",
    "units::inch_pound",
    "units::inch_pounds",
    "units::meter_kilogram",
    "units::meter_kilograms",
    "units::newton_meter",
    "units::newton_meters",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_velocity_type_caster.h"
types = [
    "units::feet_per_second_t",
    "units::kilometers_per_hour_t",
    "units::knot_t",
    "units::meters_per_second_t",
    "units::miles_per_hour_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_velocity_type_caster.h"
types = [
    "units::feet_per_second",
    "units::feet_per_second",
    "units::kilometers_per_hour",
    "units::kilometers_per_hour",
    "units::knot",
    "units::knots",
    "units::meters_per_second",
    "units::meters_per_second",
    "units::miles_per_hour",
    "units::miles_per_hour",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_voltage_type_caster.h"
types = [
    "units::abvolt_t",
    "units::kilovolt_t",
    "units::microvolt_t",
    "units::millivolt_t",
    "units::nanovolt_t",
    "units::statvolt_t",
    "units::volt_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_voltage_type_caster.h"
types = [
    "units::abvolt",
    "units::abvolts",
    "units::kilovolt",
    "units::kilovolts",
    "units::microvolt",
    "units::microvolts",
    "units::millivolt",
    "units::millivolts",
    "units::nanovolt",
    "units::nanovolts",
    "units::statvolt",
    "units::statvolts",
    "units::volt",
    "units::volts",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_volume_type_caster.h"
types = [
    "units::barrel_t",
    "units::bushel_t",
    "units::cord_t",
    "units::cubic_fathom_t",
    "units::cubic_foot_t",
    "units::cubic_inch_t",
    "units::cubic_kilometer_t",
    "units::cubic_meter_t",
    "units::cubic_mile_t",
    "units::cubic_millimeter_t",
    "units::cubic_yard_t",
    "units::cup_t",
    "units::dash_t",
    "units::dram_t",
    "units::drop_t",
    "units::fifth_t",
    "units::fluid_ounce_t",
    "units::gallon_t",
    "units::gill_t",
    "units::kiloliter_t",
    "units::liter_t",
    "units::microliter_t",
    "units::milliliter_t",
    "units::nanoliter_t",
    "units::peck_t",
    "units::pinch_t",
    "units::pint_t",
    "units::quart_t",
    "units::sack_t",
    "units::shot_t",
    "units::strike_t",
    "units::tablespoon_t",
    "units::teaspoon_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_volume_type_caster.h"
types = [
    "units::barrel",
    "units::barrels",
    "units::bushel",
    "units::bushels",
    "units::cord",
    "units::cords",
    "units::cubic_fathom",
    "units::cubic_fathoms",
    "units::cubic_feet",
    "units::cubic_foot",
    "units::cubic_inch",
    "units::cubic_inches",
    "units::cubic_kilometer",
    "units::cubic_kilometers",
    "units::cubic_meter",
    "units::cubic_meters",
    "units::cubic_mile",
    "units::cubic_miles",
    "units::cubic_millimeter",
    "units::cubic_millimeters",
    "units::cubic_yard",
    "units::cubic_yards",
    "units::cup",
    "units::cups",
    "units::dash",
    "units::dashes",
    "units::dram",
    "units::drams",
    "units::drop",
    "units::drops",
    "units::fifth",
    "units::fifths",
    "units::fluid_ounce",
    "units::fluid_ounces",
    "units::gallon",
    "units::gallons",
    "units::gill",
    "units::gills",
    "units::kiloliter",
    "units::kiloliters",
    "units::liter",
    "units::liters",
    "units::microliter",
    "units::microliters",
    "units::milliliter",
    "units::milliliters",
    "units::nanoliter",
    "units::nanoliters",
    "units::peck",
    "units::pecks",
    "units::pinch",
    "units::pinches",
    "units::pint",
    "units::pints",
    "units::quart",
    "units::quarts",
    "units::sack",
    "units::sacks",
    "units::shot",
    "units::shots",
    "units::strike",
    "units::strikes",
    "units::tablespoon",
    "units::tablespoons",
    "units::teaspoon",
    "units::teaspoons",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_compound_type_caster.h"
types = [
    "units::curvature_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_compound_type_caster.h"
types = [
    "units::compound_unit",
    "units::inverse",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_misc_type_caster.h"
types = [
    "units::dimensionless_t",
    "units::dimensionless::dimensionless_t",
    "units::scalar_t",
    "units::dimensionless::scalar_t",
]
default_arg_cast = true

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "units_misc_type_caster.h"
types = [
    "units::dimensionless",
    "units::dimensionless::dimensionless",
    "units::scalar",
    "units::dimensionless::scalar",
]
default_arg_cast = false

[[tool.semiwrap.export_type_casters.wpimath-casters.headers]]
header = "frc_eigen.h"
types = [
    "frc::Vectord",
    "frc::Matrixd",
]

[tool.semiwrap.extension_modules."wpimath._wpimath"]
name = "wpimath"
wraps = ["robotpy-native-wpimath"]
includes = ["wpimath/_impl/src"]
depends = ["wpiutil", "wpimath-casters"]

[tool.semiwrap.extension_modules."wpimath._wpimath".headers]
# frc
ComputerVisionUtil = "frc/ComputerVisionUtil.h"
# DARE = "frc/DARE.h"
# EigenCore = "frc/EigenCore.h"
MathUtil = "frc/MathUtil.h"
# StateSpaceUtil = "frc/StateSpaceUtil.h"


[tool.semiwrap.extension_modules."wpimath.filter._filter"]
name = "wpimath_filter"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath"]
yaml_path = "semiwrap/filter"

[tool.semiwrap.extension_modules."wpimath.filter._filter".headers]
Debouncer = "frc/filter/Debouncer.h"
LinearFilter = "frc/filter/LinearFilter.h"
MedianFilter = "frc/filter/MedianFilter.h"
SlewRateLimiter = "frc/filter/SlewRateLimiter.h"


[tool.semiwrap.extension_modules."wpimath.geometry._geometry"]
name = "wpimath_geometry"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath"]
includes = ["wpimath/geometry/include"]
yaml_path = "semiwrap/geometry"

[tool.semiwrap.extension_modules."wpimath.geometry._geometry".headers]
# frc/geometry
CoordinateAxis = "frc/geometry/CoordinateAxis.h"
CoordinateSystem = "frc/geometry/CoordinateSystem.h"
Ellipse2d = "frc/geometry/Ellipse2d.h"
Pose2d = "frc/geometry/Pose2d.h"
Pose3d = "frc/geometry/Pose3d.h"
Quaternion = "frc/geometry/Quaternion.h"
Rectangle2d = "frc/geometry/Rectangle2d.h"
Rotation2d = "frc/geometry/Rotation2d.h"
Rotation3d = "frc/geometry/Rotation3d.h"
Transform2d = "frc/geometry/Transform2d.h"
Transform3d = "frc/geometry/Transform3d.h"
Translation2d = "frc/geometry/Translation2d.h"
Translation3d = "frc/geometry/Translation3d.h"
Twist2d = "frc/geometry/Twist2d.h"
Twist3d = "frc/geometry/Twist3d.h"

[tool.semiwrap.extension_modules."wpimath.interpolation._interpolation"]
name = "wpimath_interpolation"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath_geometry"]
yaml_path = "semiwrap/interpolation"

[tool.semiwrap.extension_modules."wpimath.interpolation._interpolation".headers]
# frc/interpolation
TimeInterpolatableBuffer = "frc/interpolation/TimeInterpolatableBuffer.h"


[tool.semiwrap.extension_modules."wpimath.kinematics._kinematics"]
name = "wpimath_kinematics"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath_geometry"]
yaml_path = "semiwrap/kinematics"

[tool.semiwrap.extension_modules."wpimath.kinematics._kinematics".headers]
# frc/kinematics
ChassisSpeeds = "frc/kinematics/ChassisSpeeds.h"
DifferentialDriveKinematics = "frc/kinematics/DifferentialDriveKinematics.h"
DifferentialDriveOdometry3d = "frc/kinematics/DifferentialDriveOdometry3d.h"
DifferentialDriveOdometry = "frc/kinematics/DifferentialDriveOdometry.h"
DifferentialDriveWheelPositions = "frc/kinematics/DifferentialDriveWheelPositions.h"
DifferentialDriveWheelSpeeds = "frc/kinematics/DifferentialDriveWheelSpeeds.h"
Kinematics = "frc/kinematics/Kinematics.h"
MecanumDriveKinematics = "frc/kinematics/MecanumDriveKinematics.h"
MecanumDriveOdometry = "frc/kinematics/MecanumDriveOdometry.h"
MecanumDriveOdometry3d = "frc/kinematics/MecanumDriveOdometry3d.h"
MecanumDriveWheelPositions = "frc/kinematics/MecanumDriveWheelPositions.h"
MecanumDriveWheelSpeeds = "frc/kinematics/MecanumDriveWheelSpeeds.h"
Odometry = "frc/kinematics/Odometry.h"
Odometry3d = "frc/kinematics/Odometry3d.h"
SwerveDriveKinematics = "frc/kinematics/SwerveDriveKinematics.h"
SwerveDriveOdometry = "frc/kinematics/SwerveDriveOdometry.h"
SwerveDriveOdometry3d = "frc/kinematics/SwerveDriveOdometry3d.h"
SwerveModulePosition = "frc/kinematics/SwerveModulePosition.h"
SwerveModuleState = "frc/kinematics/SwerveModuleState.h"


[tool.semiwrap.extension_modules."wpimath.spline._spline"]
name = "wpimath_spline"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath_geometry"]
yaml_path = "semiwrap/spline"

[tool.semiwrap.extension_modules."wpimath.spline._spline".headers]
# frc/spline
CubicHermiteSpline = "frc/spline/CubicHermiteSpline.h"
QuinticHermiteSpline = "frc/spline/QuinticHermiteSpline.h"
Spline = "frc/spline/Spline.h"
SplineHelper = "frc/spline/SplineHelper.h"
SplineParameterizer = "frc/spline/SplineParameterizer.h"


[tool.semiwrap.extension_modules."wpimath._controls._controls"]
name = "wpimath_controls"
wraps = ["robotpy-native-wpimath"]
depends = ["wpimath", "wpimath_geometry", "wpimath_kinematics", "wpimath_spline"]
yaml_path = "semiwrap/controls"

[tool.semiwrap.extension_modules."wpimath._controls._controls".headers]
# frc/controller
ArmFeedforward = "frc/controller/ArmFeedforward.h"
BangBangController = "frc/controller/BangBangController.h"
ControlAffinePlantInversionFeedforward = "frc/controller/ControlAffinePlantInversionFeedforward.h"
DifferentialDriveAccelerationLimiter = "frc/controller/DifferentialDriveAccelerationLimiter.h"
DifferentialDriveFeedforward = "frc/controller/DifferentialDriveFeedforward.h"
DifferentialDriveWheelVoltages = "frc/controller/DifferentialDriveWheelVoltages.h"
ElevatorFeedforward = "frc/controller/ElevatorFeedforward.h"
HolonomicDriveController = "frc/controller/HolonomicDriveController.h"
ImplicitModelFollower = "frc/controller/ImplicitModelFollower.h"
LTVDifferentialDriveController = "frc/controller/LTVDifferentialDriveController.h"
LTVUnicycleController = "frc/controller/LTVUnicycleController.h"
LinearPlantInversionFeedforward = "frc/controller/LinearPlantInversionFeedforward.h"
LinearQuadraticRegulator = "frc/controller/LinearQuadraticRegulator.h"
PIDController = "frc/controller/PIDController.h"
ProfiledPIDController = "frc/controller/ProfiledPIDController.h"
SimpleMotorFeedforward = "frc/controller/SimpleMotorFeedforward.h"

# frc/estimator
# AngleStatistics = "frc/estimator/AngleStatistics.h"
DifferentialDrivePoseEstimator = "frc/estimator/DifferentialDrivePoseEstimator.h"
DifferentialDrivePoseEstimator3d = "frc/estimator/DifferentialDrivePoseEstimator3d.h"
ExtendedKalmanFilter = "frc/estimator/ExtendedKalmanFilter.h"
KalmanFilter = "frc/estimator/KalmanFilter.h"
# KalmanFilterLatencyCompensator = "frc/estimator/KalmanFilterLatencyCompensator.h"
MecanumDrivePoseEstimator = "frc/estimator/MecanumDrivePoseEstimator.h"
MecanumDrivePoseEstimator3d = "frc/estimator/MecanumDrivePoseEstimator3d.h"
# MerweScaledSigmaPoints = "frc/estimator/MerweScaledSigmaPoints.h"
PoseEstimator = "frc/estimator/PoseEstimator.h"
PoseEstimator3d = "frc/estimator/PoseEstimator3d.h"
SwerveDrivePoseEstimator = "frc/estimator/SwerveDrivePoseEstimator.h"
SwerveDrivePoseEstimator3d = "frc/estimator/SwerveDrivePoseEstimator3d.h"
# UnscentedKalmanFilter = "frc/estimator/UnscentedKalmanFilter.h"
# UnscentedTransform = "frc/estimator/UnscentedTransform.h"

# frc/optimization
SimulatedAnnealing = "frc/optimization/SimulatedAnnealing.h"

# frc/path
TravelingSalesman = "frc/path/TravelingSalesman.h"

# frc/system
# Discretization = "frc/system/Discretization.h"
LinearSystem = "frc/system/LinearSystem.h"
LinearSystemLoop = "frc/system/LinearSystemLoop.h"
# NumericalIntegration = "frc/system/NumericalIntegration.h"
# NumericalJacobian = "frc/system/NumericalJacobian.h"

# frc/system/plant
DCMotor = "frc/system/plant/DCMotor.h"
LinearSystemId = "frc/system/plant/LinearSystemId.h"

# frc/trajectory
ExponentialProfile = "frc/trajectory/ExponentialProfile.h"
Trajectory = "frc/trajectory/Trajectory.h"
TrajectoryConfig = "frc/trajectory/TrajectoryConfig.h"
TrajectoryGenerator = "frc/trajectory/TrajectoryGenerator.h"
TrajectoryParameterizer = "frc/trajectory/TrajectoryParameterizer.h"
TrapezoidProfile = "frc/trajectory/TrapezoidProfile.h"

# frc/trajectory/constraint
CentripetalAccelerationConstraint = "frc/trajectory/constraint/CentripetalAccelerationConstraint.h"
DifferentialDriveKinematicsConstraint = "frc/trajectory/constraint/DifferentialDriveKinematicsConstraint.h"
DifferentialDriveVoltageConstraint = "frc/trajectory/constraint/DifferentialDriveVoltageConstraint.h"
EllipticalRegionConstraint = "frc/trajectory/constraint/EllipticalRegionConstraint.h"
MaxVelocityConstraint = "frc/trajectory/constraint/MaxVelocityConstraint.h"
MecanumDriveKinematicsConstraint = "frc/trajectory/constraint/MecanumDriveKinematicsConstraint.h"
RectangularRegionConstraint = "frc/trajectory/constraint/RectangularRegionConstraint.h"
SwerveDriveKinematicsConstraint = "frc/trajectory/constraint/SwerveDriveKinematicsConstraint.h"
TrajectoryConstraint = "frc/trajectory/constraint/TrajectoryConstraint.h"

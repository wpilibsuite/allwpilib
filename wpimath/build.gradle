ext {
    useJava = true
    useCpp = true
    baseId = 'wpimath'
    groupId = 'edu.wpi.first.wpimath'

    nativeName = 'wpimath'
    devMain = 'edu.wpi.first.math.DevMain'

    splitSetup = {
        it.sources {
            sleipnirCpp(CppSourceSet) {
                source {
                    srcDirs 'src/main/native/thirdparty/sleipnir/src'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/main/native/thirdparty/eigen/include',
                            'src/main/native/thirdparty/fmt/include',
                            'src/main/native/thirdparty/sleipnir/include',
                            'src/main/native/thirdparty/sleipnir/src'
                }
            }
            nanopbCpp(CppSourceSet) {
                source {
                    srcDirs 'src/generated/main/native/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs 'src/generated/main/native/cpp'
                }
            }
        }
    }
}

apply from: "${rootDir}/shared/jni/setupBuild.gradle"

cppHeadersZip {
    from('src/main/native/thirdparty/eigen/include') {
        into '/'
    }
    from('src/main/native/thirdparty/gcem/include') {
        into '/'
    }
    from("src/generated/main/native/cpp/wpimath/protobuf") {
        into '/wpimath/protobuf'
        include '**/*.h'
    }
    from('src/main/native/thirdparty/sleipnir/include') {
        into '/'
    }
}

model {
    components {
        all {
            it.sources.each {
                it.exportedHeaders {
                    srcDirs 'src/main/native/include',
                            'src/main/native/thirdparty/eigen/include',
                            'src/main/native/thirdparty/gcem/include',
                            'src/main/native/thirdparty/sleipnir/include',
                            'src/generated/main/native/cpp'
                }
            }
        }
    }
    binaries {
        all {
            it.cppCompiler.define 'SLEIPNIR_EXPORTS'

            if (it.component.name == "${nativeName}JNI") {
                lib project: ':telemetry', library: 'telemetry', linkage: 'static'
            } else {
                lib project: ':telemetry', library: 'telemetry', linkage: 'shared'
            }
        }
    }
}

nativeUtils.exportsConfigs {
    wpimath {
        objectFilterClosure = { file ->
            return file.name.endsWith('.pb.obj') || file.name.endsWith('.npb.obj')
        }
    }
}

dependencies {
    api project(":telemetry")
    api project(":wpiunits")
    api "org.ejml:ejml-simple:0.43.1"
    api "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    api "com.fasterxml.jackson.core:jackson-core:2.15.2"
    api "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    api "us.hebi.quickbuf:quickbuf-runtime:1.3.3"
}

sourceSets.main.java.srcDir "${projectDir}/src/generated/main/java"
sourceSets.main.resources.srcDir "${projectDir}/src/main/proto"

task unitsHeaders(type: Zip) {
    destinationDirectory = file("$buildDir/outputs")
    archiveBaseName = zipBaseName
    archiveClassifier = "units"

    from(licenseFile) {
        into '/'
    }

    ext.includeDirs = [
        project.file('src/main/native/include/units')
    ]

    ext.includeDirs.each {
        from(it) {
            into '/units'
        }
    }
}

addTaskToCopyAllOutputs(unitsHeaders)

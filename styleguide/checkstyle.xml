<?xml version="1.0"?>
<!DOCTYPE
module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- Checkstyle configuration that checks the Google coding conventions from
  Google Java Style that can be found at https://google.github.io/styleguide/javaguide.html.
  Checkstyle is very configurable. Be sure to read the documentation at http://checkstyle.sf.net
  (or in your downloaded distribution). To completely disable a check, just
  comment it out or delete it from the file. Authors: Max Vetrenko, Ruslan
  Diachenko, Roman Ivanov. -->
<module name="Checker">
  <property name="charset" value="UTF-8" />
  <property name="severity" value="error" />
  <module name="SuppressionFilter">
    <property name="file"
      value="${config_loc}/checkstyle-suppressions.xml" />
  </module>
  <property name="fileExtensions" value="java, properties, xml" />
  <!-- Checks for whitespace -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true" />
  </module>
  <module name="LineLength">
    <property name="fileExtensions" value="java" />
    <property name="max" value="100" />
    <property name="ignorePattern"
      value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
  </module>
  <module name="NewlineAtEndOfFile" />
  <module name="SuppressWarningsFilter" />
  <module name="TreeWalker">
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat"
        value="CHECKSTYLE.OFF\: ([\w\|]+)" />
      <property name="onCommentFormat"
        value="CHECKSTYLE.ON\: ([\w\|]+)" />
      <property name="checkFormat" value="$1" />
    </module>
    <module name="SuppressWarningsHolder" />
    <module name="OuterTypeFilename" />
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
      <property name="format"
        value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
      <property name="message"
        value="Avoid using corresponding octal or Unicode escape." />
    </module>
    <module name="IllegalTokenText">
      <property name="tokens" value="NUM_INT,NUM_LONG" />
      <property name="format" value="^0[^lx]" />
      <property name="ignoreCase" value="true" />
      <property name="message"
        value="Forbid leading zeros in an integer literal, other than zero and a hex literal." />
    </module>
    <module name="IllegalTokenText">
      <property name="tokens" value="NUM_DOUBLE,NUM_FLOAT" />
      <property name="format" value="(^\.|\.$)" />
      <property name="ignoreCase" value="true" />
      <property name="message"
        value="Must use leading and trailing zero in floating point numbers." />
    </module>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters"
        value="true" />
      <property name="allowByTailComment" value="true" />
      <property name="allowNonPrintableEscapes" value="true" />
    </module>
    <module name="CustomImportOrder">
      <property name="sortImportsInGroupAlphabetically"
        value="true" />
      <property name="separateLineBetweenGroups" value="true" />
      <property name="customImportOrderRules"
        value="STATIC###THIRD_PARTY_PACKAGE" />
      <property name="tokens"
        value="IMPORT, STATIC_IMPORT, PACKAGE_DEF" />
    </module>
    <module name="AvoidStarImport" />
    <module name="RedundantImport" />
    <module name="UnusedImports" />
    <module name="OneTopLevelClass" />
    <module name="NoLineWrap" />
    <module name="EmptyBlock">
      <property name="option" value="TEXT" />
      <property name="tokens"
        value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
    </module>
    <module name="NeedBraces" />
    <module name="LeftCurly">
      <property name="tokens"
        value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF" />
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame" />
      <property name="tokens"
        value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO" />
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone" />
      <property name="option" value="alone" />
      <property name="tokens"
        value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                    INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,
                    COMPACT_CTOR_DEF" />
    </module>
    <module name="SuppressionXpathSingleFilter">
      <!-- suppression is required till https://github.com/checkstyle/checkstyle/issues/7541 -->
      <property name="id" value="RightCurlyAlone" />
      <property name="query"
        value="//RCURLY[parent::SLIST[count(./*)=1]
                                     or preceding-sibling::*[last()][self::LCURLY]]" />
    </module>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true" />
      <property name="allowEmptyLambdas" value="true" />
      <property name="allowEmptyMethods" value="true" />
      <property name="allowEmptyTypes" value="true" />
      <property name="allowEmptyLoops" value="true" />
      <property name="ignoreEnhancedForColon" value="false" />
      <property name="tokens"
        value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                    LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                    NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                    SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND" />
      <message key="ws.notFollowed"
        value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
      <message key="ws.notPreceded"
        value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="WhitespaceAfter" />
    <module name="OneStatementPerLine" />
    <module name="MultipleVariableDeclarations" />
    <module name="ArrayTypeStyle" />
    <module name="MissingSwitchDefault" />
    <module name="FallThrough" />
    <module name="SimplifyBooleanExpression" />
    <module name="SimplifyBooleanReturn" />
    <module name="StringLiteralEquality" />
    <module name="UnnecessaryParentheses" />
    <module name="UpperEll" />
    <module name="ModifierOrder" />
    <module name="RedundantModifier" />
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true" />
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="DOT" />
      <property name="option" value="nl" />
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="COMMA" />
      <property name="option" value="EOL" />
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern"
        value="Package name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
        value="Type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MemberName">
      <property name="format"
        value="^(m_([a-zA-Z]|[a-z][a-zA-Z0-9]+)|value)$" />
      <message key="name.invalidPattern"
        value="Member name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ParameterName">
      <property name="format"
        value="^([a-zA-Z]|[a-z][a-zA-Z0-9]+)$" />
      <message key="name.invalidPattern"
        value="Parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LambdaParameterName">
      <property name="format"
        value="^(_?[a-zA-Z]|_?[a-z][a-zA-Z0-9]+)$" />
      <message key="name.invalidPattern"
        value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="CatchParameterName">
      <property name="format"
        value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
        value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF" />
      <property name="format"
        value="^([a-zA-Z][0-9]*|[a-z][a-zA-Z0-9]+)$" />
      <property name="allowOneCharVarInForLoop" value="true" />
      <message key="name.invalidPattern"
        value="Local variable name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern"
        value="Class type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern"
        value="Method type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern"
        value="Interface type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="NoFinalizer" />
    <module name="GenericWhitespace">
      <message key="ws.followed"
        value="GenericWhitespace ''{0}'' is followed by whitespace." />
      <message key="ws.preceded"
        value="GenericWhitespace ''{0}'' is preceded with whitespace." />
      <message key="ws.illegalFollow"
        value="GenericWhitespace ''{0}'' should followed by whitespace." />
      <message key="ws.notPreceded"
        value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="OverloadMethodsDeclarationOrder" />
    <module name="VariableDeclarationUsageDistance" />
    <module name="MethodParamPad" />
    <module name="TypecastParenPad" />
    <module name="OperatorWrap">
      <property name="option" value="NL" />
      <property name="tokens"
        value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR " />
    </module>
    <module name="AnnotationLocation">
      <property name="tokens"
        value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
    </module>
    <module name="AnnotationLocation">
      <property name="tokens" value="VARIABLE_DEF" />
      <property name="allowSamelineMultipleAnnotations"
        value="true" />
    </module>
    <module name="MissingOverride" />
    <module name="NonEmptyAtclauseDescription" />
    <module name="JavadocTagContinuationIndentation" />
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments"
        value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
    </module>
    <module name="JavadocParagraph" />
    <module name="AtclauseOrder">
      <property name="tagOrder"
        value="@param, @return, @throws, @deprecated" />
      <property name="target"
        value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
    </module>
    <module name="JavadocMethod">
      <property name="accessModifiers" value="public" />
      <property name="allowMissingParamTags" value="true" />
      <property name="allowMissingReturnTag" value="true" />
      <property name="allowedAnnotations" value="Override, Test" />
      <property name="tokens"
        value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF" />
    </module>
    <module name="MissingJavadocMethod">
      <property name="scope" value="public" />
      <property name="minLineCount" value="2" />
      <property name="allowedAnnotations" value="Override, Test" />
      <property name="tokens"
        value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF,
                                   COMPACT_CTOR_DEF" />
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
      <message key="name.invalidPattern"
        value="Method name ''{0}'' must match pattern ''{1}''." />
    </module>
    <!-- https://github.com/checkstyle/checkstyle/issues/4052 -->
    <!-- <module name="SingleLineJavadoc"> <property name="ignoreInlineTags"
      value="false" /> </module> -->
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected" />
    </module>
    <module name="CommentsIndentation" />
    <module name="PackageDeclaration" />
    <module name="MissingDeprecated"/>
  </module>
</module>

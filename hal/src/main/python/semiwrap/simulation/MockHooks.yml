extra_includes:
- sim_cb.h
- pybind11/functional.h

strip_prefixes:
- HALSIM_

functions:
  HALSIM_SetRuntimeType:
  HALSIM_WaitForProgramStart:
  HALSIM_SetProgramStarted:
  HALSIM_GetProgramStarted:
  HALSIM_RestartTiming:
  HALSIM_PauseTiming:
  HALSIM_ResumeTiming:
  HALSIM_IsTimingPaused:
  HALSIM_StepTiming:
  HALSIM_StepTimingAsync:

  # following functions are ignored for raw function pointers

  HALSIM_SetSendError:
    ignore: true
  HALSIM_SetSendConsoleLine:
    ignore: true

  HALSIM_RegisterSimPeriodicBeforeCallback:
    param_override:
      param:
        ignore: true
    cpp_code: |
      [](std::function<void(void)> fn) -> std::unique_ptr<SimCB> {
        auto cb = std::make_unique<SimCB>(fn, HALSIM_CancelSimPeriodicBeforeCallback);
        auto uid = HALSIM_RegisterSimPeriodicBeforeCallback([](void *param) {
          ((SimCB*)param)->m_fn();
        }, cb.get());
        cb->SetUID(uid);
        return std::move(cb);
      }
  HALSIM_CancelSimPeriodicBeforeCallback:
    ignore: true

  HALSIM_RegisterSimPeriodicAfterCallback:
    param_override:
      param:
        ignore: true
    cpp_code: |
      [](std::function<void(void)> fn) -> std::unique_ptr<SimCB> {
        auto cb = std::make_unique<SimCB>(fn, HALSIM_CancelSimPeriodicAfterCallback);
        auto uid = HALSIM_RegisterSimPeriodicAfterCallback([](void *param) {
          ((SimCB*)param)->m_fn();
        }, cb.get());
        cb->SetUID(uid);
        return std::move(cb);
      }
  HALSIM_CancelSimPeriodicAfterCallback:
    ignore: true

  HALSIM_CancelAllSimPeriodicCallbacks:

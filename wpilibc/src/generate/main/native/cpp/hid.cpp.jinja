// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpilibc/generate_hids.py. DO NOT MODIFY
{% macro capitalize_first(string) -%}
{{ string[0]|capitalize + string[1:] }}
{%- endmacro %}
{% macro snakecase(string) -%}
{{ string|camel_to_snake }}
{%- endmacro %}
#include "frc/{{ ConsoleName }}Controller.h"

#include <hal/UsageReporting.h>
#include <wpi/sendable/SendableBuilder.h>

#include "frc/event/BooleanEvent.h"

using namespace frc;

{{ ConsoleName }}Controller::{{ ConsoleName }}Controller(int port) : GenericHID(port) {
  HAL_ReportUsage("HID", port, "{{ ConsoleName }}Controller");
}
{% for stick in sticks %}
double {{ ConsoleName }}Controller::Get{{ stick.NameParts|map("capitalize")|join }}() const {
  return GetRawAxis(Axis::{{ snakecase(stick.NameParts|join) }});
}
{% endfor -%}
{% for trigger in triggers %}
double {{ ConsoleName }}Controller::Get{{ capitalize_first(trigger.name) }}Axis() const {
  return GetRawAxis(Axis::{{ snakecase(trigger.name) }});
}
{% if trigger.UseThresholdMethods %}
BooleanEvent {{ ConsoleName }}Controller::{{ capitalize_first(trigger.name) }}(double threshold, EventLoop* loop) const {
  return BooleanEvent(loop, [this, threshold] { return this->Get{{ capitalize_first(trigger.name) }}Axis() > threshold; });
}

BooleanEvent {{ ConsoleName }}Controller::{{ capitalize_first(trigger.name) }}(EventLoop* loop) const {
  return this->{{ capitalize_first(trigger.name) }}(0.5, loop);
}
{% endif -%}
{% endfor -%}
{% for button in buttons %}
bool {{ ConsoleName }}Controller::Get{{ capitalize_first(button.name) }}Button() const {
  return GetRawButton(Button::{{ snakecase(button.name) }});
}

bool {{ ConsoleName }}Controller::Get{{ capitalize_first(button.name) }}ButtonPressed() {
  return GetRawButtonPressed(Button::{{ snakecase(button.name) }});
}

bool {{ ConsoleName }}Controller::Get{{ capitalize_first(button.name) }}ButtonReleased() {
  return GetRawButtonReleased(Button::{{ snakecase(button.name) }});
}

BooleanEvent {{ ConsoleName }}Controller::{{ capitalize_first(button.name) }}(EventLoop* loop) const {
  return BooleanEvent(loop, [this]() { return this->Get{{ capitalize_first(button.name) }}Button(); });
}
{% endfor -%}
{% if ConsoleName == "Xbox" or ConsoleName == "Stadia"%}
bool {{ ConsoleName }}Controller::GetLeftBumper() const {
  return GetRawButton(Button::LEFT_BUMPER);
}

bool {{ ConsoleName }}Controller::GetRightBumper() const {
  return GetRawButton(Button::RIGHT_BUMPER);
}

bool {{ ConsoleName }}Controller::GetLeftBumperPressed() {
  return GetRawButtonPressed(Button::LEFT_BUMPER);
}

bool {{ ConsoleName }}Controller::GetRightBumperPressed() {
  return GetRawButtonPressed(Button::RIGHT_BUMPER);
}

bool {{ ConsoleName }}Controller::GetLeftBumperReleased() {
  return GetRawButtonReleased(Button::LEFT_BUMPER);
}

bool {{ ConsoleName }}Controller::GetRightBumperReleased() {
  return GetRawButtonReleased(Button::RIGHT_BUMPER);
}
{%- elif ConsoleName == "PS4" or ConsoleName == "PS5" %}
bool {{ ConsoleName }}Controller::GetTouchpad() const {
  return GetRawButton(Button::TOUCHPAD);
}

bool {{ ConsoleName }}Controller::GetTouchpadPressed() {
  return GetRawButtonPressed(Button::TOUCHPAD);
}

bool {{ ConsoleName }}Controller::GetTouchpadReleased() {
  return GetRawButtonReleased(Button::TOUCHPAD);
}
{%- endif %}

void {{ ConsoleName }}Controller::InitSendable(wpi::SendableBuilder& builder) {
  builder.SetSmartDashboardType("HID");
  builder.PublishConstString("ControllerType", "{{ ConsoleName }}");
{%- for trigger in triggers %}
  builder.AddDoubleProperty("{{ capitalize_first(trigger.name) }}", [this] { return Get{{ capitalize_first(trigger.name) }}Axis(); }, nullptr);
{%- endfor -%}
{% for stick in sticks %}
  builder.AddDoubleProperty("{{ stick.NameParts|map("capitalize")|join }}", [this] { return Get{{ stick.NameParts|map("capitalize")|join }}(); }, nullptr);
{%- endfor -%}
{% for button in buttons %}
  builder.AddBooleanProperty("{{ capitalize_first(button.name) }}", [this] { return Get{{ capitalize_first(button.name) }}Button(); }, nullptr);
{%- endfor %}
}

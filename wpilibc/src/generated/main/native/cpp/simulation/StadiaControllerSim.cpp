// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpilibc/generate_hids.py. DO NOT MODIFY


#include "frc/simulation/StadiaControllerSim.h"

#include "frc/StadiaController.h"

using namespace frc;
using namespace frc::sim;

StadiaControllerSim::StadiaControllerSim(const StadiaController& joystick)
    : GenericHIDSim{joystick} {
  SetAxisCount(4);
  SetButtonCount(15);
  SetPOVCount(1);
}

StadiaControllerSim::StadiaControllerSim(int port) : GenericHIDSim{port} {
  SetAxisCount(4);
  SetButtonCount(15);
  SetPOVCount(1);
}

void StadiaControllerSim::SetLeftX(double value) {
  SetRawAxis(StadiaController::Axis::LEFT_X, value);
}

void StadiaControllerSim::SetRightX(double value) {
  SetRawAxis(StadiaController::Axis::RIGHT_X, value);
}

void StadiaControllerSim::SetLeftY(double value) {
  SetRawAxis(StadiaController::Axis::LEFT_Y, value);
}

void StadiaControllerSim::SetRightY(double value) {
  SetRawAxis(StadiaController::Axis::RIGHT_Y, value);
}

void StadiaControllerSim::SetAButton(bool value) {
  SetRawButton(StadiaController::Button::A, value);
}

void StadiaControllerSim::SetBButton(bool value) {
  SetRawButton(StadiaController::Button::B, value);
}

void StadiaControllerSim::SetXButton(bool value) {
  SetRawButton(StadiaController::Button::X, value);
}

void StadiaControllerSim::SetYButton(bool value) {
  SetRawButton(StadiaController::Button::Y, value);
}

void StadiaControllerSim::SetLeftBumperButton(bool value) {
  SetRawButton(StadiaController::Button::LEFT_BUMPER, value);
}

void StadiaControllerSim::SetRightBumperButton(bool value) {
  SetRawButton(StadiaController::Button::RIGHT_BUMPER, value);
}

void StadiaControllerSim::SetLeftStickButton(bool value) {
  SetRawButton(StadiaController::Button::LEFT_STICK, value);
}

void StadiaControllerSim::SetRightStickButton(bool value) {
  SetRawButton(StadiaController::Button::RIGHT_STICK, value);
}

void StadiaControllerSim::SetEllipsesButton(bool value) {
  SetRawButton(StadiaController::Button::ELLIPSES, value);
}

void StadiaControllerSim::SetHamburgerButton(bool value) {
  SetRawButton(StadiaController::Button::HAMBURGER, value);
}

void StadiaControllerSim::SetStadiaButton(bool value) {
  SetRawButton(StadiaController::Button::STADIA, value);
}

void StadiaControllerSim::SetRightTriggerButton(bool value) {
  SetRawButton(StadiaController::Button::RIGHT_TRIGGER, value);
}

void StadiaControllerSim::SetLeftTriggerButton(bool value) {
  SetRawButton(StadiaController::Button::LEFT_TRIGGER, value);
}

void StadiaControllerSim::SetGoogleButton(bool value) {
  SetRawButton(StadiaController::Button::GOOGLE, value);
}

void StadiaControllerSim::SetFrameButton(bool value) {
  SetRawButton(StadiaController::Button::FRAME, value);
}

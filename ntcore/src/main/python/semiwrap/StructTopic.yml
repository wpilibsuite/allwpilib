classes:
  wpi::nt::StructSubscriber:
    template_params:
    - T
    - I
    methods:
      StructSubscriber:
        overloads:
          '':
            ignore: true
          NT_Subscriber, T, I...:
            ignore: true
      Get:
        overloads:
          '[const]':
          const T& [const]:
      GetInto:
        ignore: true
      GetAtomic:
        overloads:
          '[const]':
          const T& [const]:
      ReadQueue:
      GetTopic:
    inline_code: |
      .def("close", [](wpi::nt::StructSubscriber<T, I> *self) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructSubscriber<T, I>();
      }, py::doc("Destroys the subscriber"))
      .def("__enter__", [](wpi::nt::StructSubscriber<T, I> *self) {
        return self;
      })
      .def("__exit__", [](wpi::nt::StructSubscriber<T, I> *self, py::args args) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructSubscriber<T, I>();
      })
  wpi::nt::StructPublisher:
    template_params:
    - T
    - I
    methods:
      StructPublisher:
        overloads:
          '':
            ignore: true
          NT_Publisher, I...:
            ignore: true
      Set:
      SetDefault:
      GetTopic:
    inline_code: |
      .def("close", [](wpi::nt::StructPublisher<T, I> *self) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructPublisher<T, I>();
      }, py::doc("Destroys the publisher"))
      .def("__enter__", [](wpi::nt::StructPublisher<T, I> *self) {
        return self;
      })
      .def("__exit__", [](wpi::nt::StructPublisher<T, I> *self, py::args args) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructPublisher<T, I>();
      })
  wpi::nt::StructEntry:
    template_params:
    - T
    - I
    base_qualnames:
      StructSubscriber: wpi::nt::StructSubscriber<T, I>
      StructPublisher: wpi::nt::StructPublisher<T, I>
    methods:
      StructEntry:
        overloads:
          '':
            ignore: true
          NT_Entry, T, const I&...:
            ignore: true
      GetHandle:
        ignore: true
      GetTopic:
      Unpublish:
    inline_code: |
      .def("close", [](wpi::nt::StructEntry<T, I> *self) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructEntry<T, I>();
      }, py::doc("Destroys the entry"))
      .def("__enter__", [](wpi::nt::StructEntry<T, I> *self) {
        return self;
      })
      .def("__exit__", [](wpi::nt::StructEntry<T, I> *self, py::args args) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructEntry<T, I>();
      })
  wpi::nt::StructTopic:
    template_params:
    - T
    - I
    methods:
      StructTopic:
        overloads:
          '':
            ignore: true
          NT_Topic, I...:
            ignore: true
          Topic, I...:
            param_override:
              info:
                name: type
            cpp_code: |
              [](Topic topic, const py::type &t) {
                WPyStructInfo info(t);
                return wpi::nt::StructTopic<T, I>(topic, info);
              }
      Subscribe:
      Publish:
      PublishEx:
      GetEntry:
    inline_code: |
      .def("close", [](wpi::nt::StructTopic<T, I> *self) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructTopic<T, I>();
      }, py::doc("Destroys the topic"))
      .def("__enter__", [](wpi::nt::StructTopic<T, I> *self) {
        return self;
      })
      .def("__exit__", [](wpi::nt::StructTopic<T, I> *self, py::args args) {
        py::gil_scoped_release release;
        *self = wpi::nt::StructTopic<T, I>();
      })
templates:
  StructSubscriber:
    qualname: wpi::nt::StructSubscriber
    params:
    - WPyStruct
    - WPyStructInfo
  StructPublisher:
    qualname: wpi::nt::StructPublisher
    params:
    - WPyStruct
    - WPyStructInfo
  StructEntry:
    qualname: wpi::nt::StructEntry
    params:
    - WPyStruct
    - WPyStructInfo
  StructTopic:
    qualname: wpi::nt::StructTopic
    params:
    - WPyStruct
    - WPyStructInfo

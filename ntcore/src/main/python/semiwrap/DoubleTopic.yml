classes:
  nt::DoubleSubscriber:
    methods:
      DoubleSubscriber:
        overloads:
          '':
            ignore: true
          NT_Subscriber, ParamType:
            ignore: true
      Get:
        overloads:
          '[const]':
          ParamType [const]:
      GetAtomic:
        overloads:
          '[const]':
          ParamType [const]:
      ReadQueue:
      GetTopic:
    inline_code: |
      .def("close", [](DoubleSubscriber *self) {
        py::gil_scoped_release release;
        *self = DoubleSubscriber();
      }, py::doc("Destroys the subscriber"))
      .def("__enter__", [](DoubleSubscriber *self) {
        return self;
      })
      .def("__exit__", [](DoubleSubscriber *self, py::args args) {
        py::gil_scoped_release release;
        *self = DoubleSubscriber();
      })
  nt::DoublePublisher:
    methods:
      DoublePublisher:
        overloads:
          '':
            ignore: true
          NT_Publisher:
            ignore: true
      Set:
      SetDefault:
      GetTopic:
    inline_code: |
      .def("close", [](DoublePublisher *self) {
        py::gil_scoped_release release;
        *self = DoublePublisher();
      }, py::doc("Destroys the publisher"))
      .def("__enter__", [](DoublePublisher *self) {
        return self;
      })
      .def("__exit__", [](DoublePublisher *self, py::args args) {
        py::gil_scoped_release release;
        *self = DoublePublisher();
      })
  nt::DoubleEntry:
    methods:
      DoubleEntry:
        overloads:
          '':
            ignore: true
          NT_Entry, ParamType:
            ignore: true
      GetHandle:
        ignore: true
      GetTopic:
      Unpublish:
    inline_code: |
      .def("close", [](DoubleEntry *self) {
        py::gil_scoped_release release;
        *self = DoubleEntry();
      }, py::doc("Destroys the entry"))
      .def("__enter__", [](DoubleEntry *self) {
        return self;
      })
      .def("__exit__", [](DoubleEntry *self, py::args args) {
        py::gil_scoped_release release;
        *self = DoubleEntry();
      })
  nt::DoubleTopic:
    attributes:
      kTypeString:
    methods:
      DoubleTopic:
        overloads:
          '':
            ignore: true
          NT_Topic:
            ignore: true
          Topic:
      Subscribe:
      SubscribeEx:
      Publish:
      PublishEx:
      GetEntry:
      GetEntryEx:
    inline_code: |
      .def("close", [](DoubleTopic *self) {
        py::gil_scoped_release release;
        *self = DoubleTopic();
      }, py::doc("Destroys the topic"))
      .def("__enter__", [](DoubleTopic *self) {
        return self;
      })
      .def("__exit__", [](DoubleTopic *self, py::args args) {
        py::gil_scoped_release release;
        *self = DoubleTopic();
      })
